
H:/ECSE324/G32_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	4c 12 00 00 58 12 00 00 64 12 00 00 70 12 00 00     L...X...d...p...
  30:	7c 12 00 00 bc 24 00 00 f4 10 00 00 88 12 00 00     |....$..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0008df 	bl	2458 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002620 	.word	0x00002620

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031858 	.word	0x00031858

00000124 <__cs3_heap_start_ptr>:
     124:	00031880 	.word	0x00031880

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031860 	.word	0x00031860
     170:	00031863 	.word	0x00031863
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031860 	.word	0x00031860
     1bc:	00031860 	.word	0x00031860
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031860 	.word	0x00031860
     200:	00000000 	.word	0x00000000
     204:	00002548 	.word	0x00002548

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002548 	.word	0x00002548
     250:	00031864 	.word	0x00031864
     254:	00002620 	.word	0x00002620
     258:	00000000 	.word	0x00000000

0000025c <signal>:
const int llBound[] = {0, 10};
const int urBound[] = {319, 230};
const float displayScaler = 4.6875;


float signal(float f, int t) {
     25c:	e92d4810 	push	{r4, r11, lr}
     260:	e28db008 	add	r11, sp, #8
     264:	e24dd01c 	sub	sp, sp, #28
     268:	e50b0020 	str	r0, [r11, #-32]	; 0xffffffe0
     26c:	e50b1024 	str	r1, [r11, #-36]	; 0xffffffdc
	float index = (f * t);
     270:	e51b0024 	ldr	r0, [r11, #-36]	; 0xffffffdc
     274:	eb0006a0 	bl	1cfc <__aeabi_i2f>
     278:	e1a03000 	mov	r3, r0
     27c:	e1a00003 	mov	r0, r3
     280:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     284:	eb0006d3 	bl	1dd8 <__aeabi_fmul>
     288:	e1a03000 	mov	r3, r0
     28c:	e50b3010 	str	r3, [r11, #-16]
	int integer = (int) index;
     290:	e51b0010 	ldr	r0, [r11, #-16]
     294:	eb00078d 	bl	20d0 <__aeabi_f2iz>
     298:	e1a03000 	mov	r3, r0
     29c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	float remainder = index - (float) integer;
     2a0:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     2a4:	eb000694 	bl	1cfc <__aeabi_i2f>
     2a8:	e1a03000 	mov	r3, r0
     2ac:	e51b0010 	ldr	r0, [r11, #-16]
     2b0:	e1a01003 	mov	r1, r3
     2b4:	eb00061e 	bl	1b34 <__aeabi_fsub>
     2b8:	e1a03000 	mov	r3, r0
     2bc:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	integer = integer % 48000;
     2c0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     2c4:	e30129f1 	movw	r2, #6641	; 0x19f1
     2c8:	e3402576 	movt	r2, #1398	; 0x576
     2cc:	e0c21392 	smull	r1, r2, r2, r3
     2d0:	e1a01542 	asr	r1, r2, #10
     2d4:	e1a02fc3 	asr	r2, r3, #31
     2d8:	e0622001 	rsb	r2, r2, r1
     2dc:	e30b1b80 	movw	r1, #48000	; 0xbb80
     2e0:	e0020291 	mul	r2, r1, r2
     2e4:	e0623003 	rsb	r3, r2, r3
     2e8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec

	float signal = (1 - remainder) * (float)sine[integer] + remainder * (float)sine[integer + 1];
     2ec:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     2f0:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     2f4:	eb00060e 	bl	1b34 <__aeabi_fsub>
     2f8:	e1a03000 	mov	r3, r0
     2fc:	e1a04003 	mov	r4, r3
     300:	e3023628 	movw	r3, #9768	; 0x2628
     304:	e3403000 	movt	r3, #0
     308:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     30c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     310:	e1a00003 	mov	r0, r3
     314:	eb000678 	bl	1cfc <__aeabi_i2f>
     318:	e1a03000 	mov	r3, r0
     31c:	e1a00004 	mov	r0, r4
     320:	e1a01003 	mov	r1, r3
     324:	eb0006ab 	bl	1dd8 <__aeabi_fmul>
     328:	e1a03000 	mov	r3, r0
     32c:	e1a04003 	mov	r4, r3
     330:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     334:	e2832001 	add	r2, r3, #1
     338:	e3023628 	movw	r3, #9768	; 0x2628
     33c:	e3403000 	movt	r3, #0
     340:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     344:	e1a00003 	mov	r0, r3
     348:	eb00066b 	bl	1cfc <__aeabi_i2f>
     34c:	e1a03000 	mov	r3, r0
     350:	e1a00003 	mov	r0, r3
     354:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     358:	eb00069e 	bl	1dd8 <__aeabi_fmul>
     35c:	e1a03000 	mov	r3, r0
     360:	e1a00004 	mov	r0, r4
     364:	e1a01003 	mov	r1, r3
     368:	eb0005f2 	bl	1b38 <__addsf3>
     36c:	e1a03000 	mov	r3, r0
     370:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	return signal;	//(int)
     374:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
}
     378:	e1a00003 	mov	r0, r3
     37c:	e24bd008 	sub	sp, r11, #8
     380:	e8bd8810 	pop	{r4, r11, pc}

00000384 <getCharCodeIndex>:


//Returns corresponding index of the charCode array for a given char. Returns -1 if does not contain it.
int getCharCodeIndex(char elem){
     384:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     388:	e28db000 	add	r11, sp, #0
     38c:	e24dd014 	sub	sp, sp, #20
     390:	e1a03000 	mov	r3, r0
     394:	e54b300d 	strb	r3, [r11, #-13]
	int i;
	for(i = 0; i < numFrequencies; i++){
     398:	e3a03000 	mov	r3, #0
     39c:	e50b3008 	str	r3, [r11, #-8]
     3a0:	ea00000c 	b	3d8 <getCharCodeIndex+0x54>
		if(byteCodes[i] == elem)
     3a4:	e302354c 	movw	r3, #9548	; 0x254c
     3a8:	e3403000 	movt	r3, #0
     3ac:	e51b2008 	ldr	r2, [r11, #-8]
     3b0:	e0833002 	add	r3, r3, r2
     3b4:	e5d33000 	ldrb	r3, [r3]
     3b8:	e55b200d 	ldrb	r2, [r11, #-13]
     3bc:	e1520003 	cmp	r2, r3
     3c0:	1a000001 	bne	3cc <getCharCodeIndex+0x48>
			return i;
     3c4:	e51b3008 	ldr	r3, [r11, #-8]
     3c8:	ea000009 	b	3f4 <getCharCodeIndex+0x70>


//Returns corresponding index of the charCode array for a given char. Returns -1 if does not contain it.
int getCharCodeIndex(char elem){
	int i;
	for(i = 0; i < numFrequencies; i++){
     3cc:	e51b3008 	ldr	r3, [r11, #-8]
     3d0:	e2833001 	add	r3, r3, #1
     3d4:	e50b3008 	str	r3, [r11, #-8]
     3d8:	e3023590 	movw	r3, #9616	; 0x2590
     3dc:	e3403000 	movt	r3, #0
     3e0:	e5933000 	ldr	r3, [r3]
     3e4:	e51b2008 	ldr	r2, [r11, #-8]
     3e8:	e1520003 	cmp	r2, r3
     3ec:	baffffec 	blt	3a4 <getCharCodeIndex+0x20>
		if(byteCodes[i] == elem)
			return i;
	}
	return -1;
     3f0:	e3e03000 	mvn	r3, #0
}
     3f4:	e1a00003 	mov	r0, r3
     3f8:	e28bd000 	add	sp, r11, #0
     3fc:	e8bd0800 	ldmfd	sp!, {r11}
     400:	e12fff1e 	bx	lr

00000404 <main>:


int main() {
     404:	e92d4830 	push	{r4, r5, r11, lr}
     408:	e28db00c 	add	r11, sp, #12
     40c:	e24dd088 	sub	sp, sp, #136	; 0x88
	int_setup(1, (int []){199}); //enable ps2 interrupts
     410:	e3a030c7 	mov	r3, #199	; 0xc7
     414:	e50b305c 	str	r3, [r11, #-92]	; 0xffffffa4
     418:	e24b305c 	sub	r3, r11, #92	; 0x5c
     41c:	e3a00001 	mov	r0, #1
     420:	e1a01003 	mov	r1, r3
     424:	eb0003a6 	bl	12c4 <int_setup>

	//octaves
	int currentOctave = baseOctave;				//variable octave
     428:	e302359c 	movw	r3, #9628	; 0x259c
     42c:	e3403000 	movt	r3, #0
     430:	e5933000 	ldr	r3, [r3]
     434:	e50b3010 	str	r3, [r11, #-16]
	float frequencyMultiplier = 1;				//multiplier used to get base frequencies to frequencies of current octave
     438:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
     43c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	
	//amplitude
	float finalSignal;	//final signal written to codec
	float ampPerVol = (float) maxAmplitude / ((float) maxTableAmplitude * (float) maxVolume); //scaler that converts a (sum of table signal amplitudes * current volume) to the final amplitude
     440:	e30235a8 	movw	r3, #9640	; 0x25a8
     444:	e3403000 	movt	r3, #0
     448:	e5933000 	ldr	r3, [r3]
     44c:	e1a00003 	mov	r0, r3
     450:	eb000629 	bl	1cfc <__aeabi_i2f>
     454:	e1a04000 	mov	r4, r0
     458:	e30235a4 	movw	r3, #9636	; 0x25a4
     45c:	e3403000 	movt	r3, #0
     460:	e5933000 	ldr	r3, [r3]
     464:	e1a00003 	mov	r0, r3
     468:	eb000623 	bl	1cfc <__aeabi_i2f>
     46c:	e1a05000 	mov	r5, r0
     470:	e30235ac 	movw	r3, #9644	; 0x25ac
     474:	e3403000 	movt	r3, #0
     478:	e5933000 	ldr	r3, [r3]
     47c:	e1a00003 	mov	r0, r3
     480:	eb00061d 	bl	1cfc <__aeabi_i2f>
     484:	e1a03000 	mov	r3, r0
     488:	e1a00005 	mov	r0, r5
     48c:	e1a01003 	mov	r1, r3
     490:	eb000650 	bl	1dd8 <__aeabi_fmul>
     494:	e1a03000 	mov	r3, r0
     498:	e1a00004 	mov	r0, r4
     49c:	e1a01003 	mov	r1, r3
     4a0:	eb0006b2 	bl	1f70 <__aeabi_fdiv>
     4a4:	e1a03000 	mov	r3, r0
     4a8:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0

	//volume
	int currentVolume = 50;	//variable volume
     4ac:	e3a03032 	mov	r3, #50	; 0x32
     4b0:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8

	//inputs and time
	unsigned int t = 0;
     4b4:	e3a03000 	mov	r3, #0
     4b8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	char inputCode;
	char* pInputCode = &inputCode;
     4bc:	e24b305d 	sub	r3, r11, #93	; 0x5d
     4c0:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	int breakCode = 0;
     4c4:	e3a03000 	mov	r3, #0
     4c8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	int keysPressed[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};	//note keys pressed
     4cc:	e3a03000 	mov	r3, #0
     4d0:	e50b3094 	str	r3, [r11, #-148]	; 0xffffff6c
     4d4:	e3a03000 	mov	r3, #0
     4d8:	e50b3090 	str	r3, [r11, #-144]	; 0xffffff70
     4dc:	e3a03000 	mov	r3, #0
     4e0:	e50b308c 	str	r3, [r11, #-140]	; 0xffffff74
     4e4:	e3a03000 	mov	r3, #0
     4e8:	e50b3088 	str	r3, [r11, #-136]	; 0xffffff78
     4ec:	e3a03000 	mov	r3, #0
     4f0:	e50b3084 	str	r3, [r11, #-132]	; 0xffffff7c
     4f4:	e3a03000 	mov	r3, #0
     4f8:	e50b3080 	str	r3, [r11, #-128]	; 0xffffff80
     4fc:	e3a03000 	mov	r3, #0
     500:	e50b307c 	str	r3, [r11, #-124]	; 0xffffff84
     504:	e3a03000 	mov	r3, #0
     508:	e50b3078 	str	r3, [r11, #-120]	; 0xffffff88
     50c:	e3a03000 	mov	r3, #0
     510:	e50b3074 	str	r3, [r11, #-116]	; 0xffffff8c
     514:	e3a03000 	mov	r3, #0
     518:	e50b3070 	str	r3, [r11, #-112]	; 0xffffff90
     51c:	e3a03000 	mov	r3, #0
     520:	e50b306c 	str	r3, [r11, #-108]	; 0xffffff94
     524:	e3a03000 	mov	r3, #0
     528:	e50b3068 	str	r3, [r11, #-104]	; 0xffffff98
     52c:	e3a03000 	mov	r3, #0
     530:	e50b3064 	str	r3, [r11, #-100]	; 0xffffff9c
	int waveUpdated = 0;
     534:	e3a03000 	mov	r3, #0
     538:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc

	//display
	float pixelPerAmp = (float)(urBound[1] - llBound[1]) / ((float) maxAmplitude * 6);
     53c:	e30235bc 	movw	r3, #9660	; 0x25bc
     540:	e3403000 	movt	r3, #0
     544:	e5932004 	ldr	r2, [r3, #4]
     548:	e30235b4 	movw	r3, #9652	; 0x25b4
     54c:	e3403000 	movt	r3, #0
     550:	e5933004 	ldr	r3, [r3, #4]
     554:	e0633002 	rsb	r3, r3, r2
     558:	e1a00003 	mov	r0, r3
     55c:	eb0005e6 	bl	1cfc <__aeabi_i2f>
     560:	e1a04000 	mov	r4, r0
     564:	e30235a8 	movw	r3, #9640	; 0x25a8
     568:	e3403000 	movt	r3, #0
     56c:	e5933000 	ldr	r3, [r3]
     570:	e1a00003 	mov	r0, r3
     574:	eb0005e0 	bl	1cfc <__aeabi_i2f>
     578:	e1a03000 	mov	r3, r0
     57c:	e1a00003 	mov	r0, r3
     580:	e3a01000 	mov	r1, #0
     584:	e34410c0 	movt	r1, #16576	; 0x40c0
     588:	eb000612 	bl	1dd8 <__aeabi_fmul>
     58c:	e1a03000 	mov	r3, r0
     590:	e1a00004 	mov	r0, r4
     594:	e1a01003 	mov	r1, r3
     598:	eb000674 	bl	1f70 <__aeabi_fdiv>
     59c:	e1a03000 	mov	r3, r0
     5a0:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8
	unsigned int pixelt;
	int lastPixelY = -1;
     5a4:	e3e03000 	mvn	r3, #0
     5a8:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

	VGA_clear_charbuff_ASM();
     5ac:	eb000506 	bl	19cc <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
     5b0:	eb000515 	bl	1a0c <VGA_clear_pixelbuff_ASM>

	//write volume and octave displays
	VGA_write_char_ASM(0, 0, 'V');
     5b4:	e3a00000 	mov	r0, #0
     5b8:	e3a01000 	mov	r1, #0
     5bc:	e3a02056 	mov	r2, #86	; 0x56
     5c0:	eb000521 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(1, 0, 'O');
     5c4:	e3a00001 	mov	r0, #1
     5c8:	e3a01000 	mov	r1, #0
     5cc:	e3a0204f 	mov	r2, #79	; 0x4f
     5d0:	eb00051d 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(2, 0, 'L');
     5d4:	e3a00002 	mov	r0, #2
     5d8:	e3a01000 	mov	r1, #0
     5dc:	e3a0204c 	mov	r2, #76	; 0x4c
     5e0:	eb000519 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(3, 0, 'U');
     5e4:	e3a00003 	mov	r0, #3
     5e8:	e3a01000 	mov	r1, #0
     5ec:	e3a02055 	mov	r2, #85	; 0x55
     5f0:	eb000515 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(4, 0, 'M');
     5f4:	e3a00004 	mov	r0, #4
     5f8:	e3a01000 	mov	r1, #0
     5fc:	e3a0204d 	mov	r2, #77	; 0x4d
     600:	eb000511 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(5, 0, 'E');
     604:	e3a00005 	mov	r0, #5
     608:	e3a01000 	mov	r1, #0
     60c:	e3a02045 	mov	r2, #69	; 0x45
     610:	eb00050d 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(6, 0, ':');
     614:	e3a00006 	mov	r0, #6
     618:	e3a01000 	mov	r1, #0
     61c:	e3a0203a 	mov	r2, #58	; 0x3a
     620:	eb000509 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(7, 0, ' ');
     624:	e3a00007 	mov	r0, #7
     628:	e3a01000 	mov	r1, #0
     62c:	e3a02020 	mov	r2, #32
     630:	eb000505 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(8, 0, currentVolume / 10 + '0');
     634:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     638:	e3063667 	movw	r3, #26215	; 0x6667
     63c:	e3463666 	movt	r3, #26214	; 0x6666
     640:	e0c31293 	smull	r1, r3, r3, r2
     644:	e1a01143 	asr	r1, r3, #2
     648:	e1a03fc2 	asr	r3, r2, #31
     64c:	e0633001 	rsb	r3, r3, r1
     650:	e6ef3073 	uxtb	r3, r3
     654:	e2833030 	add	r3, r3, #48	; 0x30
     658:	e6ef3073 	uxtb	r3, r3
     65c:	e3a00008 	mov	r0, #8
     660:	e3a01000 	mov	r1, #0
     664:	e1a02003 	mov	r2, r3
     668:	eb0004f7 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(9, 0, (currentVolume % 10) + '0');
     66c:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     670:	e3063667 	movw	r3, #26215	; 0x6667
     674:	e3463666 	movt	r3, #26214	; 0x6666
     678:	e0c32193 	smull	r2, r3, r3, r1
     67c:	e1a02143 	asr	r2, r3, #2
     680:	e1a03fc1 	asr	r3, r1, #31
     684:	e0632002 	rsb	r2, r3, r2
     688:	e1a03002 	mov	r3, r2
     68c:	e1a03103 	lsl	r3, r3, #2
     690:	e0833002 	add	r3, r3, r2
     694:	e1a03083 	lsl	r3, r3, #1
     698:	e0632001 	rsb	r2, r3, r1
     69c:	e6ef3072 	uxtb	r3, r2
     6a0:	e2833030 	add	r3, r3, #48	; 0x30
     6a4:	e6ef3073 	uxtb	r3, r3
     6a8:	e3a00009 	mov	r0, #9
     6ac:	e3a01000 	mov	r1, #0
     6b0:	e1a02003 	mov	r2, r3
     6b4:	eb0004e4 	bl	1a4c <VGA_write_char_ASM>

	VGA_write_char_ASM(0, 1, 'O');
     6b8:	e3a00000 	mov	r0, #0
     6bc:	e3a01001 	mov	r1, #1
     6c0:	e3a0204f 	mov	r2, #79	; 0x4f
     6c4:	eb0004e0 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(1, 1, 'C');
     6c8:	e3a00001 	mov	r0, #1
     6cc:	e3a01001 	mov	r1, #1
     6d0:	e3a02043 	mov	r2, #67	; 0x43
     6d4:	eb0004dc 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(2, 1, 'T');
     6d8:	e3a00002 	mov	r0, #2
     6dc:	e3a01001 	mov	r1, #1
     6e0:	e3a02054 	mov	r2, #84	; 0x54
     6e4:	eb0004d8 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(3, 1, 'A');
     6e8:	e3a00003 	mov	r0, #3
     6ec:	e3a01001 	mov	r1, #1
     6f0:	e3a02041 	mov	r2, #65	; 0x41
     6f4:	eb0004d4 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(4, 1, 'V');
     6f8:	e3a00004 	mov	r0, #4
     6fc:	e3a01001 	mov	r1, #1
     700:	e3a02056 	mov	r2, #86	; 0x56
     704:	eb0004d0 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(5, 1, 'E');
     708:	e3a00005 	mov	r0, #5
     70c:	e3a01001 	mov	r1, #1
     710:	e3a02045 	mov	r2, #69	; 0x45
     714:	eb0004cc 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(6, 1, ':');
     718:	e3a00006 	mov	r0, #6
     71c:	e3a01001 	mov	r1, #1
     720:	e3a0203a 	mov	r2, #58	; 0x3a
     724:	eb0004c8 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(7, 1, ' ');
     728:	e3a00007 	mov	r0, #7
     72c:	e3a01001 	mov	r1, #1
     730:	e3a02020 	mov	r2, #32
     734:	eb0004c4 	bl	1a4c <VGA_write_char_ASM>
	VGA_write_char_ASM(8, 1, currentOctave + '0');
     738:	e51b3010 	ldr	r3, [r11, #-16]
     73c:	e6ef3073 	uxtb	r3, r3
     740:	e2833030 	add	r3, r3, #48	; 0x30
     744:	e6ef3073 	uxtb	r3, r3
     748:	e3a00008 	mov	r0, #8
     74c:	e3a01001 	mov	r1, #1
     750:	e1a02003 	mov	r2, r3
     754:	eb0004bc 	bl	1a4c <VGA_write_char_ASM>
     758:	ea000000 	b	760 <main+0x35c>
				}
				lastPixelY = pixelY;
			}
			waveUpdated = 0;
		}
	}
     75c:	e1a00000 	nop			; (mov r0, r0)
	VGA_write_char_ASM(8, 1, currentOctave + '0');
	

	while(1) {
		//reading keyboard input
		if(read_ps2_data_ASM(pInputCode)){
     760:	e51b0044 	ldr	r0, [r11, #-68]	; 0xffffffbc
     764:	eb00041b 	bl	17d8 <read_ps2_data_ASM>
     768:	e1a03000 	mov	r3, r0
     76c:	e3530000 	cmp	r3, #0
     770:	0a0000d8 	beq	ad8 <ICDIPTR+0x2d8>
			if(breakCode){	//code after break code
     774:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     778:	e3530000 	cmp	r3, #0
     77c:	0a000013 	beq	7d0 <main+0x3cc>
				int index = getCharCodeIndex(inputCode);
     780:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     784:	e1a00003 	mov	r0, r3
     788:	ebfffefd 	bl	384 <getCharCodeIndex>
     78c:	e50b004c 	str	r0, [r11, #-76]	; 0xffffffb4
				if(index != -1){
     790:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
     794:	e3730001 	cmn	r3, #1
     798:	0a000009 	beq	7c4 <main+0x3c0>
					keysPressed[index] = 0;
     79c:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
     7a0:	e3e03087 	mvn	r3, #135	; 0x87
     7a4:	e1a02102 	lsl	r2, r2, #2
     7a8:	e24b100c 	sub	r1, r11, #12
     7ac:	e0812002 	add	r2, r1, r2
     7b0:	e0823003 	add	r3, r2, r3
     7b4:	e3a02000 	mov	r2, #0
     7b8:	e5832000 	str	r2, [r3]
					waveUpdated = 1;
     7bc:	e3a03001 	mov	r3, #1
     7c0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
				}
				breakCode = 0;
     7c4:	e3a03000 	mov	r3, #0
     7c8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     7cc:	ea0000c1 	b	ad8 <ICDIPTR+0x2d8>
			}
			else if(inputCode == 0xF0){	//break code detected
     7d0:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     7d4:	e35300f0 	cmp	r3, #240	; 0xf0
     7d8:	1a000002 	bne	7e8 <main+0x3e4>
				breakCode = 1;
     7dc:	e3a03001 	mov	r3, #1
     7e0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
     7e4:	ea0000bb 	b	ad8 <ICDIPTR+0x2d8>
			}
			else if(inputCode == octaveCodes[0] && currentOctave > minOctave){	//decrease octave
     7e8:	e30235a0 	movw	r3, #9632	; 0x25a0
     7ec:	e3403000 	movt	r3, #0
     7f0:	e5d32000 	ldrb	r2, [r3]
     7f4:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     7f8:	e1520003 	cmp	r2, r3
     7fc:	1a000018 	bne	864 <ICDIPTR+0x64>
     800:	e3023598 	movw	r3, #9624	; 0x2598
     804:	e3403000 	movt	r3, #0
     808:	e5933000 	ldr	r3, [r3]
     80c:	e51b2010 	ldr	r2, [r11, #-16]
     810:	e1520003 	cmp	r2, r3
     814:	da000012 	ble	864 <ICDIPTR+0x64>
				frequencyMultiplier /= 2;
     818:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     81c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
     820:	eb0005d2 	bl	1f70 <__aeabi_fdiv>
     824:	e1a03000 	mov	r3, r0
     828:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				currentOctave--;
     82c:	e51b3010 	ldr	r3, [r11, #-16]
     830:	e2433001 	sub	r3, r3, #1
     834:	e50b3010 	str	r3, [r11, #-16]
				VGA_write_char_ASM(8, 1, currentOctave + '0');
     838:	e51b3010 	ldr	r3, [r11, #-16]
     83c:	e6ef3073 	uxtb	r3, r3
     840:	e2833030 	add	r3, r3, #48	; 0x30
     844:	e6ef3073 	uxtb	r3, r3
     848:	e3a00008 	mov	r0, #8
     84c:	e3a01001 	mov	r1, #1
     850:	e1a02003 	mov	r2, r3
     854:	eb00047c 	bl	1a4c <VGA_write_char_ASM>
				waveUpdated = 1;
     858:	e3a03001 	mov	r3, #1
     85c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     860:	ea00009c 	b	ad8 <ICDIPTR+0x2d8>
			}
			else if(inputCode == octaveCodes[1] && currentOctave < maxOctave){	//increase octave
     864:	e30235a0 	movw	r3, #9632	; 0x25a0
     868:	e3403000 	movt	r3, #0
     86c:	e5d32001 	ldrb	r2, [r3, #1]
     870:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     874:	e1520003 	cmp	r2, r3
     878:	1a000019 	bne	8e4 <ICDIPTR+0xe4>
     87c:	e3023594 	movw	r3, #9620	; 0x2594
     880:	e3403000 	movt	r3, #0
     884:	e5933000 	ldr	r3, [r3]
     888:	e51b2010 	ldr	r2, [r11, #-16]
     88c:	e1520003 	cmp	r2, r3
     890:	aa000013 	bge	8e4 <ICDIPTR+0xe4>
				frequencyMultiplier *= 2;
     894:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     898:	e1a00003 	mov	r0, r3
     89c:	e1a01003 	mov	r1, r3
     8a0:	eb0004a4 	bl	1b38 <__addsf3>
     8a4:	e1a03000 	mov	r3, r0
     8a8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				currentOctave++;
     8ac:	e51b3010 	ldr	r3, [r11, #-16]
     8b0:	e2833001 	add	r3, r3, #1
     8b4:	e50b3010 	str	r3, [r11, #-16]
				VGA_write_char_ASM(8, 1, currentOctave + '0');
     8b8:	e51b3010 	ldr	r3, [r11, #-16]
     8bc:	e6ef3073 	uxtb	r3, r3
     8c0:	e2833030 	add	r3, r3, #48	; 0x30
     8c4:	e6ef3073 	uxtb	r3, r3
     8c8:	e3a00008 	mov	r0, #8
     8cc:	e3a01001 	mov	r1, #1
     8d0:	e1a02003 	mov	r2, r3
     8d4:	eb00045c 	bl	1a4c <VGA_write_char_ASM>
				waveUpdated = 1;
     8d8:	e3a03001 	mov	r3, #1
     8dc:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     8e0:	ea00007c 	b	ad8 <ICDIPTR+0x2d8>
			}
			else if(inputCode == volumeCodes[0] && currentVolume > 0){			//decrease volume
     8e4:	e30235b0 	movw	r3, #9648	; 0x25b0
     8e8:	e3403000 	movt	r3, #0
     8ec:	e5d32000 	ldrb	r2, [r3]
     8f0:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     8f4:	e1520003 	cmp	r2, r3
     8f8:	1a000029 	bne	9a4 <ICDIPTR+0x1a4>
     8fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     900:	e3530000 	cmp	r3, #0
     904:	da000026 	ble	9a4 <ICDIPTR+0x1a4>
				currentVolume--;
     908:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     90c:	e2433001 	sub	r3, r3, #1
     910:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				VGA_write_char_ASM(8, 0, currentVolume / 10 + '0');
     914:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     918:	e3063667 	movw	r3, #26215	; 0x6667
     91c:	e3463666 	movt	r3, #26214	; 0x6666
     920:	e0c31293 	smull	r1, r3, r3, r2
     924:	e1a01143 	asr	r1, r3, #2
     928:	e1a03fc2 	asr	r3, r2, #31
     92c:	e0633001 	rsb	r3, r3, r1
     930:	e6ef3073 	uxtb	r3, r3
     934:	e2833030 	add	r3, r3, #48	; 0x30
     938:	e6ef3073 	uxtb	r3, r3
     93c:	e3a00008 	mov	r0, #8
     940:	e3a01000 	mov	r1, #0
     944:	e1a02003 	mov	r2, r3
     948:	eb00043f 	bl	1a4c <VGA_write_char_ASM>
				VGA_write_char_ASM(9, 0, (currentVolume % 10) + '0');
     94c:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     950:	e3063667 	movw	r3, #26215	; 0x6667
     954:	e3463666 	movt	r3, #26214	; 0x6666
     958:	e0c32193 	smull	r2, r3, r3, r1
     95c:	e1a02143 	asr	r2, r3, #2
     960:	e1a03fc1 	asr	r3, r1, #31
     964:	e0632002 	rsb	r2, r3, r2
     968:	e1a03002 	mov	r3, r2
     96c:	e1a03103 	lsl	r3, r3, #2
     970:	e0833002 	add	r3, r3, r2
     974:	e1a03083 	lsl	r3, r3, #1
     978:	e0632001 	rsb	r2, r3, r1
     97c:	e6ef3072 	uxtb	r3, r2
     980:	e2833030 	add	r3, r3, #48	; 0x30
     984:	e6ef3073 	uxtb	r3, r3
     988:	e3a00009 	mov	r0, #9
     98c:	e3a01000 	mov	r1, #0
     990:	e1a02003 	mov	r2, r3
     994:	eb00042c 	bl	1a4c <VGA_write_char_ASM>
				waveUpdated = 1;
     998:	e3a03001 	mov	r3, #1
     99c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     9a0:	ea00004c 	b	ad8 <ICDIPTR+0x2d8>
			}
			else if(inputCode == volumeCodes[1] && currentVolume < maxVolume){	//increase volume
     9a4:	e30235b0 	movw	r3, #9648	; 0x25b0
     9a8:	e3403000 	movt	r3, #0
     9ac:	e5d32001 	ldrb	r2, [r3, #1]
     9b0:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     9b4:	e1520003 	cmp	r2, r3
     9b8:	1a00002c 	bne	a70 <ICDIPTR+0x270>
     9bc:	e30235ac 	movw	r3, #9644	; 0x25ac
     9c0:	e3403000 	movt	r3, #0
     9c4:	e5933000 	ldr	r3, [r3]
     9c8:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9cc:	e1520003 	cmp	r2, r3
     9d0:	aa000026 	bge	a70 <ICDIPTR+0x270>
				currentVolume++;
     9d4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     9d8:	e2833001 	add	r3, r3, #1
     9dc:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
				VGA_write_char_ASM(8, 0, currentVolume / 10 + '0');
     9e0:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     9e4:	e3063667 	movw	r3, #26215	; 0x6667
     9e8:	e3463666 	movt	r3, #26214	; 0x6666
     9ec:	e0c31293 	smull	r1, r3, r3, r2
     9f0:	e1a01143 	asr	r1, r3, #2
     9f4:	e1a03fc2 	asr	r3, r2, #31
     9f8:	e0633001 	rsb	r3, r3, r1
     9fc:	e6ef3073 	uxtb	r3, r3
     a00:	e2833030 	add	r3, r3, #48	; 0x30
     a04:	e6ef3073 	uxtb	r3, r3
     a08:	e3a00008 	mov	r0, #8
     a0c:	e3a01000 	mov	r1, #0
     a10:	e1a02003 	mov	r2, r3
     a14:	eb00040c 	bl	1a4c <VGA_write_char_ASM>
				VGA_write_char_ASM(9, 0, (currentVolume % 10) + '0');
     a18:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     a1c:	e3063667 	movw	r3, #26215	; 0x6667
     a20:	e3463666 	movt	r3, #26214	; 0x6666
     a24:	e0c32193 	smull	r2, r3, r3, r1
     a28:	e1a02143 	asr	r2, r3, #2
     a2c:	e1a03fc1 	asr	r3, r1, #31
     a30:	e0632002 	rsb	r2, r3, r2
     a34:	e1a03002 	mov	r3, r2
     a38:	e1a03103 	lsl	r3, r3, #2
     a3c:	e0833002 	add	r3, r3, r2
     a40:	e1a03083 	lsl	r3, r3, #1
     a44:	e0632001 	rsb	r2, r3, r1
     a48:	e6ef3072 	uxtb	r3, r2
     a4c:	e2833030 	add	r3, r3, #48	; 0x30
     a50:	e6ef3073 	uxtb	r3, r3
     a54:	e3a00009 	mov	r0, #9
     a58:	e3a01000 	mov	r1, #0
     a5c:	e1a02003 	mov	r2, r3
     a60:	eb0003f9 	bl	1a4c <VGA_write_char_ASM>
				waveUpdated = 1;
     a64:	e3a03001 	mov	r3, #1
     a68:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     a6c:	ea000019 	b	ad8 <ICDIPTR+0x2d8>
			}
			else{	//another key detected
				int index = getCharCodeIndex(inputCode);
     a70:	e55b305d 	ldrb	r3, [r11, #-93]	; 0xffffffa3
     a74:	e1a00003 	mov	r0, r3
     a78:	ebfffe41 	bl	384 <getCharCodeIndex>
     a7c:	e50b0050 	str	r0, [r11, #-80]	; 0xffffffb0
				if(index != -1 && !keysPressed[index]){	//valid byte code and pressed
     a80:	e51b3050 	ldr	r3, [r11, #-80]	; 0xffffffb0
     a84:	e3730001 	cmn	r3, #1
     a88:	0a000012 	beq	ad8 <ICDIPTR+0x2d8>
     a8c:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
     a90:	e3e03087 	mvn	r3, #135	; 0x87
     a94:	e1a02102 	lsl	r2, r2, #2
     a98:	e24b100c 	sub	r1, r11, #12
     a9c:	e0812002 	add	r2, r1, r2
     aa0:	e0823003 	add	r3, r2, r3
     aa4:	e5933000 	ldr	r3, [r3]
     aa8:	e3530000 	cmp	r3, #0
     aac:	1a000009 	bne	ad8 <ICDIPTR+0x2d8>
					keysPressed[index] = 1;
     ab0:	e51b2050 	ldr	r2, [r11, #-80]	; 0xffffffb0
     ab4:	e3e03087 	mvn	r3, #135	; 0x87
     ab8:	e1a02102 	lsl	r2, r2, #2
     abc:	e24b100c 	sub	r1, r11, #12
     ac0:	e0812002 	add	r2, r1, r2
     ac4:	e0823003 	add	r3, r2, r3
     ac8:	e3a02001 	mov	r2, #1
     acc:	e5832000 	str	r2, [r3]
					waveUpdated = 1;
     ad0:	e3a03001 	mov	r3, #1
     ad4:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
				}
			}
		}
		
		//Writing to audio codec
		float signalSum = 0;
     ad8:	e3a03000 	mov	r3, #0
     adc:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		int i;
		for(i = 0; i < numFrequencies; i++){
     ae0:	e3a03000 	mov	r3, #0
     ae4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
     ae8:	ea00001e 	b	b68 <ICDIPTR+0x368>
			if(keysPressed[i])	//bit i in keysPressed is 1?
     aec:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
     af0:	e3e03087 	mvn	r3, #135	; 0x87
     af4:	e1a02102 	lsl	r2, r2, #2
     af8:	e24b100c 	sub	r1, r11, #12
     afc:	e0812002 	add	r2, r1, r2
     b00:	e0823003 	add	r3, r2, r3
     b04:	e5933000 	ldr	r3, [r3]
     b08:	e3530000 	cmp	r3, #0
     b0c:	0a000012 	beq	b5c <ICDIPTR+0x35c>
				signalSum += signal(baseFrequencies[i] * frequencyMultiplier, t);
     b10:	e302355c 	movw	r3, #9564	; 0x255c
     b14:	e3403000 	movt	r3, #0
     b18:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
     b1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     b20:	e1a00003 	mov	r0, r3
     b24:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     b28:	eb0004aa 	bl	1dd8 <__aeabi_fmul>
     b2c:	e1a03000 	mov	r3, r0
     b30:	e1a02003 	mov	r2, r3
     b34:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     b38:	e1a00002 	mov	r0, r2
     b3c:	e1a01003 	mov	r1, r3
     b40:	ebfffdc5 	bl	25c <signal>
     b44:	e1a03000 	mov	r3, r0
     b48:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     b4c:	e1a01003 	mov	r1, r3
     b50:	eb0003f8 	bl	1b38 <__addsf3>
     b54:	e1a03000 	mov	r3, r0
     b58:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
		}
		
		//Writing to audio codec
		float signalSum = 0;
		int i;
		for(i = 0; i < numFrequencies; i++){
     b5c:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
     b60:	e2833001 	add	r3, r3, #1
     b64:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
     b68:	e3023590 	movw	r3, #9616	; 0x2590
     b6c:	e3403000 	movt	r3, #0
     b70:	e5933000 	ldr	r3, [r3]
     b74:	e51b2034 	ldr	r2, [r11, #-52]	; 0xffffffcc
     b78:	e1520003 	cmp	r2, r3
     b7c:	baffffda 	blt	aec <ICDIPTR+0x2ec>
			if(keysPressed[i])	//bit i in keysPressed is 1?
				signalSum += signal(baseFrequencies[i] * frequencyMultiplier, t);
		}
			
		finalSignal = (int) (signalSum * ampPerVol * currentVolume);
     b80:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     b84:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
     b88:	eb000492 	bl	1dd8 <__aeabi_fmul>
     b8c:	e1a03000 	mov	r3, r0
     b90:	e1a04003 	mov	r4, r3
     b94:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     b98:	eb000457 	bl	1cfc <__aeabi_i2f>
     b9c:	e1a03000 	mov	r3, r0
     ba0:	e1a00004 	mov	r0, r4
     ba4:	e1a01003 	mov	r1, r3
     ba8:	eb00048a 	bl	1dd8 <__aeabi_fmul>
     bac:	e1a03000 	mov	r3, r0
     bb0:	e1a00003 	mov	r0, r3
     bb4:	eb000545 	bl	20d0 <__aeabi_f2iz>
     bb8:	e1a03000 	mov	r3, r0
     bbc:	e1a00003 	mov	r0, r3
     bc0:	eb00044d 	bl	1cfc <__aeabi_i2f>
     bc4:	e1a03000 	mov	r3, r0
     bc8:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
     bcc:	ea000000 	b	bd4 <ICDIPTR+0x3d4>
		while(1) {
			if(audio_write_data_ASM(finalSignal, finalSignal)){
				t++;
				break;
			}
		}
     bd0:	e1a00000 	nop			; (mov r0, r0)
		}
			
		finalSignal = (int) (signalSum * ampPerVol * currentVolume);

		while(1) {
			if(audio_write_data_ASM(finalSignal, finalSignal)){
     bd4:	e51b0054 	ldr	r0, [r11, #-84]	; 0xffffffac
     bd8:	eb00053c 	bl	20d0 <__aeabi_f2iz>
     bdc:	e1a04000 	mov	r4, r0
     be0:	e51b0054 	ldr	r0, [r11, #-84]	; 0xffffffac
     be4:	eb000539 	bl	20d0 <__aeabi_f2iz>
     be8:	e1a03000 	mov	r3, r0
     bec:	e1a00004 	mov	r0, r4
     bf0:	e1a01003 	mov	r1, r3
     bf4:	eb000286 	bl	1614 <audio_write_data_ASM>
     bf8:	e1a03000 	mov	r3, r0
     bfc:	e3530000 	cmp	r3, #0
     c00:	0afffff2 	beq	bd0 <ICDIPTR+0x3d0>
				t++;
     c04:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     c08:	e2833001 	add	r3, r3, #1
     c0c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
				break;
     c10:	e1a00000 	nop			; (mov r0, r0)
			}
		}

		//Writing to VGA display
		if(waveUpdated){
     c14:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     c18:	e3530000 	cmp	r3, #0
     c1c:	0afffece 	beq	75c <main+0x358>
			lastPixelY = -1;
     c20:	e3e03000 	mvn	r3, #0
     c24:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
			VGA_clear_pixelbuff_ASM();
     c28:	eb000377 	bl	1a0c <VGA_clear_pixelbuff_ASM>
			for(pixelt = 0; pixelt < (urBound[0] - llBound[0]); pixelt++){
     c2c:	e3a03000 	mov	r3, #0
     c30:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     c34:	ea0000a9 	b	ee0 <ICDICFR+0x2e0>
				signalSum = 0;
     c38:	e3a03000 	mov	r3, #0
     c3c:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
				int j;
				for(j = 0; j < numFrequencies; j++){
     c40:	e3a03000 	mov	r3, #0
     c44:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
     c48:	ea00002a 	b	cf8 <ICDICFR+0xf8>
					if(keysPressed[j]){	//bit j in keysPressed is 1?
     c4c:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     c50:	e3e03087 	mvn	r3, #135	; 0x87
     c54:	e1a02102 	lsl	r2, r2, #2
     c58:	e24b100c 	sub	r1, r11, #12
     c5c:	e0812002 	add	r2, r1, r2
     c60:	e0823003 	add	r3, r2, r3
     c64:	e5933000 	ldr	r3, [r3]
     c68:	e3530000 	cmp	r3, #0
     c6c:	0a00001e 	beq	cec <ICDICFR+0xec>
						signalSum += signal(baseFrequencies[j] * frequencyMultiplier, (int) (pixelt * displayScaler));
     c70:	e302355c 	movw	r3, #9564	; 0x255c
     c74:	e3403000 	movt	r3, #0
     c78:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     c7c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     c80:	e1a00003 	mov	r0, r3
     c84:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     c88:	eb000452 	bl	1dd8 <__aeabi_fmul>
     c8c:	e1a03000 	mov	r3, r0
     c90:	e1a04003 	mov	r4, r3
     c94:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     c98:	eb000415 	bl	1cf4 <__aeabi_ui2f>
     c9c:	e1a02000 	mov	r2, r0
     ca0:	e30235c4 	movw	r3, #9668	; 0x25c4
     ca4:	e3403000 	movt	r3, #0
     ca8:	e5933000 	ldr	r3, [r3]
     cac:	e1a00002 	mov	r0, r2
     cb0:	e1a01003 	mov	r1, r3
     cb4:	eb000447 	bl	1dd8 <__aeabi_fmul>
     cb8:	e1a03000 	mov	r3, r0
     cbc:	e1a00003 	mov	r0, r3
     cc0:	eb000502 	bl	20d0 <__aeabi_f2iz>
     cc4:	e1a03000 	mov	r3, r0
     cc8:	e1a00004 	mov	r0, r4
     ccc:	e1a01003 	mov	r1, r3
     cd0:	ebfffd61 	bl	25c <signal>
     cd4:	e1a03000 	mov	r3, r0
     cd8:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     cdc:	e1a01003 	mov	r1, r3
     ce0:	eb000394 	bl	1b38 <__addsf3>
     ce4:	e1a03000 	mov	r3, r0
     ce8:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
			lastPixelY = -1;
			VGA_clear_pixelbuff_ASM();
			for(pixelt = 0; pixelt < (urBound[0] - llBound[0]); pixelt++){
				signalSum = 0;
				int j;
				for(j = 0; j < numFrequencies; j++){
     cec:	e51b3038 	ldr	r3, [r11, #-56]	; 0xffffffc8
     cf0:	e2833001 	add	r3, r3, #1
     cf4:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
     cf8:	e3023590 	movw	r3, #9616	; 0x2590
     cfc:	e3403000 	movt	r3, #0
     d00:	e5933000 	ldr	r3, [r3]
     d04:	e51b2038 	ldr	r2, [r11, #-56]	; 0xffffffc8
     d08:	e1520003 	cmp	r2, r3
     d0c:	baffffce 	blt	c4c <ICDICFR+0x4c>
						signalSum += signal(baseFrequencies[j] * frequencyMultiplier, (int) (pixelt * displayScaler));
						//printf("%f, %i\n", baseFrequencies[j] * frequencyMultiplier, keysPressed[j]);
					}
				}
				//printf("Total: %f, %u, %u\n", signalSum, (int) (pixelt * displayScaler), pixelt);
				finalSignal = (int) (signalSum * ampPerVol * currentVolume * pixelPerAmp);
     d10:	e51b0030 	ldr	r0, [r11, #-48]	; 0xffffffd0
     d14:	e51b1040 	ldr	r1, [r11, #-64]	; 0xffffffc0
     d18:	eb00042e 	bl	1dd8 <__aeabi_fmul>
     d1c:	e1a03000 	mov	r3, r0
     d20:	e1a04003 	mov	r4, r3
     d24:	e51b0018 	ldr	r0, [r11, #-24]	; 0xffffffe8
     d28:	eb0003f3 	bl	1cfc <__aeabi_i2f>
     d2c:	e1a03000 	mov	r3, r0
     d30:	e1a00004 	mov	r0, r4
     d34:	e1a01003 	mov	r1, r3
     d38:	eb000426 	bl	1dd8 <__aeabi_fmul>
     d3c:	e1a03000 	mov	r3, r0
     d40:	e1a00003 	mov	r0, r3
     d44:	e51b1048 	ldr	r1, [r11, #-72]	; 0xffffffb8
     d48:	eb000422 	bl	1dd8 <__aeabi_fmul>
     d4c:	e1a03000 	mov	r3, r0
     d50:	e1a00003 	mov	r0, r3
     d54:	eb0004dd 	bl	20d0 <__aeabi_f2iz>
     d58:	e1a03000 	mov	r3, r0
     d5c:	e1a00003 	mov	r0, r3
     d60:	eb0003e5 	bl	1cfc <__aeabi_i2f>
     d64:	e1a03000 	mov	r3, r0
     d68:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac
				int pixelY = (int)(finalSignal + (urBound[1] + llBound[1]) / 2);
     d6c:	e30235bc 	movw	r3, #9660	; 0x25bc
     d70:	e3403000 	movt	r3, #0
     d74:	e5932004 	ldr	r2, [r3, #4]
     d78:	e30235b4 	movw	r3, #9652	; 0x25b4
     d7c:	e3403000 	movt	r3, #0
     d80:	e5933004 	ldr	r3, [r3, #4]
     d84:	e0823003 	add	r3, r2, r3
     d88:	e1a02fa3 	lsr	r2, r3, #31
     d8c:	e0823003 	add	r3, r2, r3
     d90:	e1a030c3 	asr	r3, r3, #1
     d94:	e1a00003 	mov	r0, r3
     d98:	eb0003d7 	bl	1cfc <__aeabi_i2f>
     d9c:	e1a03000 	mov	r3, r0
     da0:	e1a00003 	mov	r0, r3
     da4:	e51b1054 	ldr	r1, [r11, #-84]	; 0xffffffac
     da8:	eb000362 	bl	1b38 <__addsf3>
     dac:	e1a03000 	mov	r3, r0
     db0:	e1a00003 	mov	r0, r3
     db4:	eb0004c5 	bl	20d0 <__aeabi_f2iz>
     db8:	e1a03000 	mov	r3, r0
     dbc:	e50b3058 	str	r3, [r11, #-88]	; 0xffffffa8
				VGA_draw_point_ASM(pixelt + llBound[0], pixelY, 0xAAAA);
     dc0:	e30235b4 	movw	r3, #9652	; 0x25b4
     dc4:	e3403000 	movt	r3, #0
     dc8:	e5933000 	ldr	r3, [r3]
     dcc:	e1a02003 	mov	r2, r3
     dd0:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     dd4:	e0823003 	add	r3, r2, r3
     dd8:	e1a00003 	mov	r0, r3
     ddc:	e51b1058 	ldr	r1, [r11, #-88]	; 0xffffffa8
     de0:	e30a2aaa 	movw	r2, #43690	; 0xaaaa
     de4:	e34f2fff 	movt	r2, #65535	; 0xffff
     de8:	eb00033b 	bl	1adc <VGA_draw_point_ASM>
				if(lastPixelY != -1){
     dec:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     df0:	e3730001 	cmn	r3, #1
     df4:	0a000034 	beq	ecc <ICDICFR+0x2cc>
					int k;
					if(pixelY > lastPixelY){
     df8:	e51b2058 	ldr	r2, [r11, #-88]	; 0xffffffa8
     dfc:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     e00:	e1520003 	cmp	r2, r3
     e04:	da000016 	ble	e64 <ICDICFR+0x264>
						for(k = pixelY - 1; k > lastPixelY; k--)
     e08:	e51b3058 	ldr	r3, [r11, #-88]	; 0xffffffa8
     e0c:	e2433001 	sub	r3, r3, #1
     e10:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
     e14:	ea00000d 	b	e50 <ICDICFR+0x250>
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
     e18:	e30235b4 	movw	r3, #9652	; 0x25b4
     e1c:	e3403000 	movt	r3, #0
     e20:	e5933000 	ldr	r3, [r3]
     e24:	e1a02003 	mov	r2, r3
     e28:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     e2c:	e0823003 	add	r3, r2, r3
     e30:	e1a00003 	mov	r0, r3
     e34:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
     e38:	e30a2aaa 	movw	r2, #43690	; 0xaaaa
     e3c:	e34f2fff 	movt	r2, #65535	; 0xffff
     e40:	eb000325 	bl	1adc <VGA_draw_point_ASM>
				int pixelY = (int)(finalSignal + (urBound[1] + llBound[1]) / 2);
				VGA_draw_point_ASM(pixelt + llBound[0], pixelY, 0xAAAA);
				if(lastPixelY != -1){
					int k;
					if(pixelY > lastPixelY){
						for(k = pixelY - 1; k > lastPixelY; k--)
     e44:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     e48:	e2433001 	sub	r3, r3, #1
     e4c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
     e50:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
     e54:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     e58:	e1520003 	cmp	r2, r3
     e5c:	caffffed 	bgt	e18 <ICDICFR+0x218>
     e60:	ea000019 	b	ecc <ICDICFR+0x2cc>
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
					}
					else if(pixelY < lastPixelY){
     e64:	e51b2058 	ldr	r2, [r11, #-88]	; 0xffffffa8
     e68:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     e6c:	e1520003 	cmp	r2, r3
     e70:	aa000015 	bge	ecc <ICDICFR+0x2cc>
						for(k = lastPixelY - 1; k > pixelY; k--)
     e74:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
     e78:	e2433001 	sub	r3, r3, #1
     e7c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
     e80:	ea00000d 	b	ebc <ICDICFR+0x2bc>
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
     e84:	e30235b4 	movw	r3, #9652	; 0x25b4
     e88:	e3403000 	movt	r3, #0
     e8c:	e5933000 	ldr	r3, [r3]
     e90:	e1a02003 	mov	r2, r3
     e94:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     e98:	e0823003 	add	r3, r2, r3
     e9c:	e1a00003 	mov	r0, r3
     ea0:	e51b103c 	ldr	r1, [r11, #-60]	; 0xffffffc4
     ea4:	e30a2aaa 	movw	r2, #43690	; 0xaaaa
     ea8:	e34f2fff 	movt	r2, #65535	; 0xffff
     eac:	eb00030a 	bl	1adc <VGA_draw_point_ASM>
					if(pixelY > lastPixelY){
						for(k = pixelY - 1; k > lastPixelY; k--)
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
					}
					else if(pixelY < lastPixelY){
						for(k = lastPixelY - 1; k > pixelY; k--)
     eb0:	e51b303c 	ldr	r3, [r11, #-60]	; 0xffffffc4
     eb4:	e2433001 	sub	r3, r3, #1
     eb8:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
     ebc:	e51b203c 	ldr	r2, [r11, #-60]	; 0xffffffc4
     ec0:	e51b3058 	ldr	r3, [r11, #-88]	; 0xffffffa8
     ec4:	e1520003 	cmp	r2, r3
     ec8:	caffffed 	bgt	e84 <ICDICFR+0x284>
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
					}
				}
				lastPixelY = pixelY;
     ecc:	e51b3058 	ldr	r3, [r11, #-88]	; 0xffffffa8
     ed0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4

		//Writing to VGA display
		if(waveUpdated){
			lastPixelY = -1;
			VGA_clear_pixelbuff_ASM();
			for(pixelt = 0; pixelt < (urBound[0] - llBound[0]); pixelt++){
     ed4:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     ed8:	e2833001 	add	r3, r3, #1
     edc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
     ee0:	e30235bc 	movw	r3, #9660	; 0x25bc
     ee4:	e3403000 	movt	r3, #0
     ee8:	e5932000 	ldr	r2, [r3]
     eec:	e30235b4 	movw	r3, #9652	; 0x25b4
     ef0:	e3403000 	movt	r3, #0
     ef4:	e5933000 	ldr	r3, [r3]
     ef8:	e0633002 	rsb	r3, r3, r2
     efc:	e1a02003 	mov	r2, r3
     f00:	e51b3028 	ldr	r3, [r11, #-40]	; 0xffffffd8
     f04:	e1520003 	cmp	r2, r3
     f08:	8affff4a 	bhi	c38 <ICDICFR+0x38>
							VGA_draw_point_ASM(pixelt + llBound[0], k, 0xAAAA);
					}
				}
				lastPixelY = pixelY;
			}
			waveUpdated = 0;
     f0c:	e3a03000 	mov	r3, #0
     f10:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
		}
	}
     f14:	eafffe10 	b	75c <main+0x358>

00000f18 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     f18:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f1c:	e28db000 	add	r11, sp, #0
     f20:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     f24:	e3a030d3 	mov	r3, #211	; 0xd3
     f28:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     f2c:	e51b3008 	ldr	r3, [r11, #-8]
     f30:	e129f003 	msr	CPSR_fc, r3
}
     f34:	e28bd000 	add	sp, r11, #0
     f38:	e8bd0800 	ldmfd	sp!, {r11}
     f3c:	e12fff1e 	bx	lr

00000f40 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     f40:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f44:	e28db000 	add	r11, sp, #0
     f48:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     f4c:	e3a03053 	mov	r3, #83	; 0x53
     f50:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     f54:	e51b3008 	ldr	r3, [r11, #-8]
     f58:	e129f003 	msr	CPSR_fc, r3
}
     f5c:	e28bd000 	add	sp, r11, #0
     f60:	e8bd0800 	ldmfd	sp!, {r11}
     f64:	e12fff1e 	bx	lr

00000f68 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     f68:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     f6c:	e28db000 	add	r11, sp, #0
     f70:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     f74:	e3e03007 	mvn	r3, #7
     f78:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     f7c:	e3a030d2 	mov	r3, #210	; 0xd2
     f80:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     f84:	e51b300c 	ldr	r3, [r11, #-12]
     f88:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     f8c:	e51b3008 	ldr	r3, [r11, #-8]
     f90:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     f94:	e3a030d3 	mov	r3, #211	; 0xd3
     f98:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     f9c:	e51b300c 	ldr	r3, [r11, #-12]
     fa0:	e129f003 	msr	CPSR_fc, r3
}
     fa4:	e28bd000 	add	sp, r11, #0
     fa8:	e8bd0800 	ldmfd	sp!, {r11}
     fac:	e12fff1e 	bx	lr

00000fb0 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     fb0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     fb4:	e28db000 	add	r11, sp, #0
     fb8:	e24dd01c 	sub	sp, sp, #28
     fbc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     fc0:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     fc4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     fc8:	e1a031c3 	asr	r3, r3, #3
     fcc:	e3c33003 	bic	r3, r3, #3
     fd0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     fd4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     fd8:	e203301f 	and	r3, r3, #31
     fdc:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     fe0:	e3a02001 	mov	r2, #1
     fe4:	e51b300c 	ldr	r3, [r11, #-12]
     fe8:	e1a03312 	lsl	r3, r2, r3
     fec:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     ff0:	e51b3008 	ldr	r3, [r11, #-8]
     ff4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     ff8:	e2433c03 	sub	r3, r3, #768	; 0x300
     ffc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    1000:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1004:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1008:	e5921000 	ldr	r1, [r2]
    100c:	e51b2010 	ldr	r2, [r11, #-16]
    1010:	e1812002 	orr	r2, r1, r2
    1014:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    1018:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    101c:	e3c33003 	bic	r3, r3, #3
    1020:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    1024:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1028:	e2033003 	and	r3, r3, #3
    102c:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    1030:	e51b2008 	ldr	r2, [r11, #-8]
    1034:	e51b300c 	ldr	r3, [r11, #-12]
    1038:	e0823003 	add	r3, r2, r3
    103c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    1040:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1044:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1048:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    104c:	e6ef2072 	uxtb	r2, r2
    1050:	e5c32000 	strb	r2, [r3]
}
    1054:	e28bd000 	add	sp, r11, #0
    1058:	e8bd0800 	ldmfd	sp!, {r11}
    105c:	e12fff1e 	bx	lr

00001060 <config_GIC>:

void config_GIC(int len, int* IDs) {
    1060:	e92d4800 	push	{r11, lr}
    1064:	e28db004 	add	r11, sp, #4
    1068:	e24dd010 	sub	sp, sp, #16
    106c:	e50b0010 	str	r0, [r11, #-16]
    1070:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1074:	e3a03000 	mov	r3, #0
    1078:	e50b3008 	str	r3, [r11, #-8]
    107c:	ea00000a 	b	10ac <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    1080:	e51b3008 	ldr	r3, [r11, #-8]
    1084:	e1a03103 	lsl	r3, r3, #2
    1088:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    108c:	e0823003 	add	r3, r2, r3
    1090:	e5933000 	ldr	r3, [r3]
    1094:	e1a00003 	mov	r0, r3
    1098:	e3a01001 	mov	r1, #1
    109c:	ebffffc3 	bl	fb0 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    10a0:	e51b3008 	ldr	r3, [r11, #-8]
    10a4:	e2833001 	add	r3, r3, #1
    10a8:	e50b3008 	str	r3, [r11, #-8]
    10ac:	e51b2008 	ldr	r2, [r11, #-8]
    10b0:	e51b3010 	ldr	r3, [r11, #-16]
    10b4:	e1520003 	cmp	r2, r3
    10b8:	bafffff0 	blt	1080 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    10bc:	e30c3104 	movw	r3, #49412	; 0xc104
    10c0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    10c4:	e30f2fff 	movw	r2, #65535	; 0xffff
    10c8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    10cc:	e3a03cc1 	mov	r3, #49408	; 0xc100
    10d0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    10d4:	e3a02001 	mov	r2, #1
    10d8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    10dc:	e3a03a0d 	mov	r3, #53248	; 0xd000
    10e0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    10e4:	e3a02001 	mov	r2, #1
    10e8:	e5832000 	str	r2, [r3]
}
    10ec:	e24bd004 	sub	sp, r11, #4
    10f0:	e8bd8800 	pop	{r11, pc}

000010f4 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    10f4:	e24ee004 	sub	lr, lr, #4
    10f8:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    10fc:	e28db018 	add	r11, sp, #24
    1100:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    1104:	e30c310c 	movw	r3, #49420	; 0xc10c
    1108:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    110c:	e5933000 	ldr	r3, [r3]
    1110:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    1114:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    1118:	e3530053 	cmp	r3, #83	; 0x53
    111c:	0a00003d 	beq	1218 <__cs3_isr_irq+0x124>
    1120:	e3530053 	cmp	r3, #83	; 0x53
    1124:	ca000011 	bgt	1170 <__cs3_isr_irq+0x7c>
    1128:	e353004e 	cmp	r3, #78	; 0x4e
    112c:	0a000031 	beq	11f8 <__cs3_isr_irq+0x104>
    1130:	e353004e 	cmp	r3, #78	; 0x4e
    1134:	ca000006 	bgt	1154 <__cs3_isr_irq+0x60>
    1138:	e3530048 	cmp	r3, #72	; 0x48
    113c:	0a000029 	beq	11e8 <__cs3_isr_irq+0xf4>
    1140:	e3530049 	cmp	r3, #73	; 0x49
    1144:	0a000029 	beq	11f0 <__cs3_isr_irq+0xfc>
    1148:	e353001d 	cmp	r3, #29
    114c:	0a000019 	beq	11b8 <__cs3_isr_irq+0xc4>
    1150:	ea000036 	b	1230 <__cs3_isr_irq+0x13c>
    1154:	e3530050 	cmp	r3, #80	; 0x50
    1158:	0a00002a 	beq	1208 <__cs3_isr_irq+0x114>
    115c:	e3530050 	cmp	r3, #80	; 0x50
    1160:	ba000026 	blt	1200 <__cs3_isr_irq+0x10c>
    1164:	e3530051 	cmp	r3, #81	; 0x51
    1168:	0a000028 	beq	1210 <__cs3_isr_irq+0x11c>
    116c:	ea00002f 	b	1230 <__cs3_isr_irq+0x13c>
    1170:	e35300c7 	cmp	r3, #199	; 0xc7
    1174:	0a000013 	beq	11c8 <__cs3_isr_irq+0xd4>
    1178:	e35300c7 	cmp	r3, #199	; 0xc7
    117c:	ca000006 	bgt	119c <__cs3_isr_irq+0xa8>
    1180:	e3530059 	cmp	r3, #89	; 0x59
    1184:	0a000027 	beq	1228 <__cs3_isr_irq+0x134>
    1188:	e35300c5 	cmp	r3, #197	; 0xc5
    118c:	0a00000b 	beq	11c0 <__cs3_isr_irq+0xcc>
    1190:	e3530054 	cmp	r3, #84	; 0x54
    1194:	0a000021 	beq	1220 <__cs3_isr_irq+0x12c>
    1198:	ea000024 	b	1230 <__cs3_isr_irq+0x13c>
    119c:	e35300c9 	cmp	r3, #201	; 0xc9
    11a0:	0a00000c 	beq	11d8 <__cs3_isr_irq+0xe4>
    11a4:	e35300c9 	cmp	r3, #201	; 0xc9
    11a8:	ba000008 	blt	11d0 <__cs3_isr_irq+0xdc>
    11ac:	e35300ca 	cmp	r3, #202	; 0xca
    11b0:	0a00000a 	beq	11e0 <__cs3_isr_irq+0xec>
    11b4:	ea00001d 	b	1230 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    11b8:	eb0000bd 	bl	14b4 <A9_PRIV_TIM_ISR>
    11bc:	ea00001c 	b	1234 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    11c0:	eb0000bc 	bl	14b8 <HPS_GPIO1_ISR>
    11c4:	ea00001a 	b	1234 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    11c8:	eb0000bb 	bl	14bc <HPS_TIM0_ISR>
    11cc:	ea000018 	b	1234 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    11d0:	eb0000c1 	bl	14dc <HPS_TIM1_ISR>
    11d4:	ea000016 	b	1234 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    11d8:	eb0000c0 	bl	14e0 <HPS_TIM2_ISR>
    11dc:	ea000014 	b	1234 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    11e0:	eb0000bf 	bl	14e4 <HPS_TIM3_ISR>
    11e4:	ea000012 	b	1234 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    11e8:	eb0000be 	bl	14e8 <FPGA_INTERVAL_TIM_ISR>
    11ec:	ea000010 	b	1234 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    11f0:	eb0000bd 	bl	14ec <FPGA_PB_KEYS_ISR>
    11f4:	ea00000e 	b	1234 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    11f8:	eb0000bc 	bl	14f0 <FPGA_Audio_ISR>
    11fc:	ea00000c 	b	1234 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    1200:	eb0000bb 	bl	14f4 <FPGA_PS2_ISR>
    1204:	ea00000a 	b	1234 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    1208:	eb0000c0 	bl	1510 <FPGA_JTAG_ISR>
    120c:	ea000008 	b	1234 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    1210:	eb0000bf 	bl	1514 <FPGA_IrDA_ISR>
    1214:	ea000006 	b	1234 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    1218:	eb0000be 	bl	1518 <FPGA_JP1_ISR>
    121c:	ea000004 	b	1234 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    1220:	eb0000bd 	bl	151c <FPGA_JP2_ISR>
    1224:	ea000002 	b	1234 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    1228:	eb0000bc 	bl	1520 <FPGA_PS2_DUAL_ISR>
    122c:	ea000000 	b	1234 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    1230:	eafffffe 	b	1230 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    1234:	e30c3110 	movw	r3, #49424	; 0xc110
    1238:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    123c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    1240:	e5832000 	str	r2, [r3]
}
    1244:	e24bd018 	sub	sp, r11, #24
    1248:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

0000124c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    124c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1250:	e28db000 	add	r11, sp, #0
	while(1);
    1254:	eafffffe 	b	1254 <__cs3_reset+0x8>

00001258 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1258:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    125c:	e28db000 	add	r11, sp, #0
	while(1);
    1260:	eafffffe 	b	1260 <__cs3_isr_undef+0x8>

00001264 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1264:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1268:	e28db000 	add	r11, sp, #0
	while(1);
    126c:	eafffffe 	b	126c <__cs3_isr_swi+0x8>

00001270 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1270:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1274:	e28db000 	add	r11, sp, #0
	while(1);
    1278:	eafffffe 	b	1278 <__cs3_isr_pabort+0x8>

0000127c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    127c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1280:	e28db000 	add	r11, sp, #0
	while(1);
    1284:	eafffffe 	b	1284 <__cs3_isr_dabort+0x8>

00001288 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1288:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    128c:	e28db000 	add	r11, sp, #0
	while(1);
    1290:	eafffffe 	b	1290 <__cs3_isr_fiq+0x8>

00001294 <fix_bug>:
}

void fix_bug() {
    1294:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1298:	e28db000 	add	r11, sp, #0
    129c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    12a0:	e30d3198 	movw	r3, #53656	; 0xd198
    12a4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    12a8:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    12ac:	e51b3008 	ldr	r3, [r11, #-8]
    12b0:	e3a02703 	mov	r2, #786432	; 0xc0000
    12b4:	e5832000 	str	r2, [r3]
}
    12b8:	e28bd000 	add	sp, r11, #0
    12bc:	e8bd0800 	ldmfd	sp!, {r11}
    12c0:	e12fff1e 	bx	lr

000012c4 <int_setup>:

void int_setup(int len, int* IDs) {
    12c4:	e92d4800 	push	{r11, lr}
    12c8:	e28db004 	add	r11, sp, #4
    12cc:	e24dd008 	sub	sp, sp, #8
    12d0:	e50b0008 	str	r0, [r11, #-8]
    12d4:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    12d8:	ebffff0e 	bl	f18 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    12dc:	ebffff21 	bl	f68 <set_A9_IRQ_stack>
	fix_bug();
    12e0:	ebffffeb 	bl	1294 <fix_bug>
	config_GIC(len, IDs);
    12e4:	e51b0008 	ldr	r0, [r11, #-8]
    12e8:	e51b100c 	ldr	r1, [r11, #-12]
    12ec:	ebffff5b 	bl	1060 <config_GIC>
	enable_A9_interrupts();
    12f0:	ebffff12 	bl	f40 <enable_A9_interrupts>
}
    12f4:	e24bd004 	sub	sp, r11, #4
    12f8:	e8bd8800 	pop	{r11, pc}

000012fc <HEX_clear_ASM>:
    12fc:	e3a01000 	mov	r1, #0
    1300:	ea000004 	b	1318 <WRITE>

00001304 <HEX_flood_ASM>:
    1304:	e3a0107f 	mov	r1, #127	; 0x7f
    1308:	ea000002 	b	1318 <WRITE>

0000130c <HEX_write_ASM>:
    130c:	e59f2064 	ldr	r2, [pc, #100]	; 1378 <PATTERNS+0x14>
    1310:	e7d21001 	ldrb	r1, [r2, r1]
    1314:	eaffffff 	b	1318 <WRITE>

00001318 <WRITE>:
    1318:	e92d0030 	push	{r4, r5}
    131c:	e59f2058 	ldr	r2, [pc, #88]	; 137c <PATTERNS+0x18>
    1320:	e3a03000 	mov	r3, #0
    1324:	e3e050ff 	mvn	r5, #255	; 0xff

00001328 <LOOP>:
    1328:	e3100001 	tst	r0, #1
    132c:	0a000003 	beq	1340 <CONTINUE>
    1330:	e5924000 	ldr	r4, [r2]
    1334:	e0044005 	and	r4, r4, r5
    1338:	e1844001 	orr	r4, r4, r1
    133c:	e5824000 	str	r4, [r2]

00001340 <CONTINUE>:
    1340:	e1a05c65 	ror	r5, r5, #24
    1344:	e1a01c61 	ror	r1, r1, #24
    1348:	e2833001 	add	r3, r3, #1
    134c:	e3530004 	cmp	r3, #4
    1350:	059f2028 	ldreq	r2, [pc, #40]	; 1380 <PATTERNS+0x1c>
    1354:	e1b000a0 	lsrs	r0, r0, #1
    1358:	1afffff2 	bne	1328 <LOOP>
    135c:	e8bd0030 	pop	{r4, r5}
    1360:	e12fff1e 	bx	lr

00001364 <PATTERNS>:
    1364:	4f5b063f 	.word	0x4f5b063f
    1368:	077d6d66 	.word	0x077d6d66
    136c:	7c776f7f 	.word	0x7c776f7f
    1370:	71795e39 	.word	0x71795e39
    1374:	000000ff 	.word	0x000000ff
    1378:	00001364 	.word	0x00001364
    137c:	ff200020 	.word	0xff200020
    1380:	ff200030 	.word	0xff200030

00001384 <HPS_TIM_config_ASM>:
    1384:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    1388:	e3a01000 	mov	r1, #0
    138c:	e3a02001 	mov	r2, #1
    1390:	e5907000 	ldr	r7, [r0]
    1394:	eaffffff 	b	1398 <LOOP>

00001398 <LOOP>:
    1398:	e1170112 	tst	r7, r2, lsl r1
    139c:	0a000000 	beq	13a4 <CONTINUE>
    13a0:	eb000004 	bl	13b8 <CONFIG>

000013a4 <CONTINUE>:
    13a4:	e2811001 	add	r1, r1, #1
    13a8:	e3510004 	cmp	r1, #4
    13ac:	bafffff9 	blt	1398 <LOOP>

000013b0 <DONE>:
    13b0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    13b4:	e12fff1e 	bx	lr

000013b8 <CONFIG>:
    13b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    13bc:	e59f30e4 	ldr	r3, [pc, #228]	; 14a8 <HPS_TIM_BASE+0x10>
    13c0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
    13c4:	eb000005 	bl	13e0 <DISABLE>
    13c8:	eb000008 	bl	13f0 <SET_LOAD_VAL>
    13cc:	eb00000e 	bl	140c <SET_LOAD_BIT>
    13d0:	eb000013 	bl	1424 <SET_INT_BIT>
    13d4:	eb000019 	bl	1440 <SET_EN_BIT>
    13d8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    13dc:	e12fff1e 	bx	lr

000013e0 <DISABLE>:
    13e0:	e5945008 	ldr	r5, [r4, #8]
    13e4:	e3c55001 	bic	r5, r5, #1
    13e8:	e5845008 	str	r5, [r4, #8]
    13ec:	e12fff1e 	bx	lr

000013f0 <SET_LOAD_VAL>:
    13f0:	e5905004 	ldr	r5, [r0, #4]
    13f4:	e3a06019 	mov	r6, #25
    13f8:	e0050695 	mul	r5, r5, r6
    13fc:	e3510002 	cmp	r1, #2
    1400:	b1a05105 	lsllt	r5, r5, #2
    1404:	e5845000 	str	r5, [r4]
    1408:	e12fff1e 	bx	lr

0000140c <SET_LOAD_BIT>:
    140c:	e5945008 	ldr	r5, [r4, #8]
    1410:	e5906008 	ldr	r6, [r0, #8]
    1414:	e3c55002 	bic	r5, r5, #2
    1418:	e1855086 	orr	r5, r5, r6, lsl #1
    141c:	e5845008 	str	r5, [r4, #8]
    1420:	e12fff1e 	bx	lr

00001424 <SET_INT_BIT>:
    1424:	e5945008 	ldr	r5, [r4, #8]
    1428:	e590600c 	ldr	r6, [r0, #12]
    142c:	e2266001 	eor	r6, r6, #1
    1430:	e3c55004 	bic	r5, r5, #4
    1434:	e1855106 	orr	r5, r5, r6, lsl #2
    1438:	e5845008 	str	r5, [r4, #8]
    143c:	e12fff1e 	bx	lr

00001440 <SET_EN_BIT>:
    1440:	e5945008 	ldr	r5, [r4, #8]
    1444:	e5906010 	ldr	r6, [r0, #16]
    1448:	e3c55001 	bic	r5, r5, #1
    144c:	e1855006 	orr	r5, r5, r6
    1450:	e5845008 	str	r5, [r4, #8]
    1454:	e12fff1e 	bx	lr

00001458 <HPS_TIM_clear_INT_ASM>:
    1458:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    145c:	e3a01000 	mov	r1, #0
    1460:	e3a02001 	mov	r2, #1
    1464:	eaffffff 	b	1468 <INT_LOOP>

00001468 <INT_LOOP>:
    1468:	e1100112 	tst	r0, r2, lsl r1
    146c:	0a000000 	beq	1474 <INT_CONTINUE>
    1470:	eb000004 	bl	1488 <CLEAR_IT>

00001474 <INT_CONTINUE>:
    1474:	e2811001 	add	r1, r1, #1
    1478:	e3510004 	cmp	r1, #4
    147c:	bafffff9 	blt	1468 <INT_LOOP>

00001480 <INT_DONE>:
    1480:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1484:	e12fff1e 	bx	lr

00001488 <CLEAR_IT>:
    1488:	e59f3018 	ldr	r3, [pc, #24]	; 14a8 <HPS_TIM_BASE+0x10>
    148c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
    1490:	e593300c 	ldr	r3, [r3, #12]
    1494:	e12fff1e 	bx	lr

00001498 <HPS_TIM_BASE>:
    1498:	ffc08000 	.word	0xffc08000
    149c:	ffc09000 	.word	0xffc09000
    14a0:	ffd00000 	.word	0xffd00000
    14a4:	ffd01000 	.word	0xffd01000
    14a8:	00001498 	.word	0x00001498

000014ac <hps_tim0_int_flag>:
    14ac:	00000000 	.word	0x00000000

000014b0 <fpga_ps2_isr_flag>:
    14b0:	00000000 	.word	0x00000000

000014b4 <A9_PRIV_TIM_ISR>:

hps_tim0_int_flag: .word 0x0
fpga_ps2_isr_flag: .word 0x0
	
A9_PRIV_TIM_ISR:
	BX LR
    14b4:	e12fff1e 	bx	lr

000014b8 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
    14b8:	e12fff1e 	bx	lr

000014bc <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
    14bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
    14c0:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
    14c4:	ebffffe3 	bl	1458 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
    14c8:	e59f0054 	ldr	r0, [pc, #84]	; 1524 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
    14cc:	e3a01001 	mov	r1, #1
	STR R1,[R0]
    14d0:	e5801000 	str	r1, [r0]

	POP {LR}
    14d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    14d8:	e12fff1e 	bx	lr

000014dc <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
    14dc:	e12fff1e 	bx	lr

000014e0 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
    14e0:	e12fff1e 	bx	lr

000014e4 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
    14e4:	e12fff1e 	bx	lr

000014e8 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
    14e8:	e12fff1e 	bx	lr

000014ec <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
    14ec:	e12fff1e 	bx	lr

000014f0 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
    14f0:	e12fff1e 	bx	lr

000014f4 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	PUSH {LR}
    14f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
    14f8:	e3a00001 	mov	r0, #1

	LDR R0, =fpga_ps2_isr_flag
    14fc:	e59f0024 	ldr	r0, [pc, #36]	; 1528 <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1
    1500:	e3a01001 	mov	r1, #1
	STR R1,[R0]
    1504:	e5801000 	str	r1, [r0]

	POP {LR}
    1508:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
    150c:	e12fff1e 	bx	lr

00001510 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
    1510:	e12fff1e 	bx	lr

00001514 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
    1514:	e12fff1e 	bx	lr

00001518 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
    1518:	e12fff1e 	bx	lr

0000151c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
    151c:	e12fff1e 	bx	lr

00001520 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
    1520:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =hps_tim0_int_flag
    1524:	000014ac 	.word	0x000014ac
FPGA_PS2_ISR:
	PUSH {LR}

	MOV R0, #0x1

	LDR R0, =fpga_ps2_isr_flag
    1528:	000014b0 	.word	0x000014b0

0000152c <read_LEDs_ASM>:
    152c:	e59f1010 	ldr	r1, [pc, #16]	; 1544 <write_LEDs_ASM+0xc>
    1530:	e5910000 	ldr	r0, [r1]
    1534:	e12fff1e 	bx	lr

00001538 <write_LEDs_ASM>:
    1538:	e59f1004 	ldr	r1, [pc, #4]	; 1544 <write_LEDs_ASM+0xc>
    153c:	e5810000 	str	r0, [r1]
    1540:	e12fff1e 	bx	lr
    1544:	ff200000 	.word	0xff200000

00001548 <audio_read_data_ASM>:
    1548:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    154c:	e92d0003 	push	{r0, r1}
    1550:	eb000093 	bl	17a4 <audio_read_ralc_ASM>
    1554:	e3500000 	cmp	r0, #0
    1558:	08bd0003 	popeq	{r0, r1}
    155c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1560:	03a00000 	moveq	r0, #0
    1564:	012fff1e 	bxeq	lr
    1568:	eb000092 	bl	17b8 <audio_read_rarc_ASM>
    156c:	e3500000 	cmp	r0, #0
    1570:	08bd0003 	popeq	{r0, r1}
    1574:	03a00000 	moveq	r0, #0
    1578:	012fff1e 	bxeq	lr
    157c:	e8bd0003 	pop	{r0, r1}
    1580:	e59f2240 	ldr	r2, [pc, #576]	; 17c8 <audio_read_rarc_ASM+0x10>
    1584:	e5922000 	ldr	r2, [r2]
    1588:	e5802000 	str	r2, [r0]
    158c:	e59f3238 	ldr	r3, [pc, #568]	; 17cc <audio_read_rarc_ASM+0x14>
    1590:	e5933000 	ldr	r3, [r3]
    1594:	e5813000 	str	r3, [r1]
    1598:	e3a00001 	mov	r0, #1

0000159c <audio_read_leftdata_ASM>:
    159c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    15a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    15a4:	eb00007e 	bl	17a4 <audio_read_ralc_ASM>
    15a8:	e3500000 	cmp	r0, #0
    15ac:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    15b0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    15b4:	03a00000 	moveq	r0, #0
    15b8:	012fff1e 	bxeq	lr
    15bc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    15c0:	e59f2200 	ldr	r2, [pc, #512]	; 17c8 <audio_read_rarc_ASM+0x10>
    15c4:	e5922000 	ldr	r2, [r2]
    15c8:	e5802000 	str	r2, [r0]
    15cc:	e3a00001 	mov	r0, #1
    15d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    15d4:	e12fff1e 	bx	lr

000015d8 <audio_read_rightdata_ASM>:
    15d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    15dc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    15e0:	eb000074 	bl	17b8 <audio_read_rarc_ASM>
    15e4:	e3500000 	cmp	r0, #0
    15e8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    15ec:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    15f0:	03a00000 	moveq	r0, #0
    15f4:	012fff1e 	bxeq	lr
    15f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    15fc:	e59f21c8 	ldr	r2, [pc, #456]	; 17cc <audio_read_rarc_ASM+0x14>
    1600:	e5922000 	ldr	r2, [r2]
    1604:	e5802000 	str	r2, [r0]
    1608:	e3a00001 	mov	r0, #1
    160c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1610:	e12fff1e 	bx	lr

00001614 <audio_write_data_ASM>:
    1614:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1618:	e92d0003 	push	{r0, r1}
    161c:	eb000056 	bl	177c <audio_read_wslc_ASM>
    1620:	e3500000 	cmp	r0, #0
    1624:	08bd0003 	popeq	{r0, r1}
    1628:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    162c:	03a00000 	moveq	r0, #0
    1630:	012fff1e 	bxeq	lr
    1634:	eb000055 	bl	1790 <audio_read_wsrc_ASM>
    1638:	e3500000 	cmp	r0, #0
    163c:	08bd0003 	popeq	{r0, r1}
    1640:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1644:	03a00000 	moveq	r0, #0
    1648:	012fff1e 	bxeq	lr
    164c:	e8bd0003 	pop	{r0, r1}
    1650:	e59f2170 	ldr	r2, [pc, #368]	; 17c8 <audio_read_rarc_ASM+0x10>
    1654:	e5820000 	str	r0, [r2]
    1658:	e59f316c 	ldr	r3, [pc, #364]	; 17cc <audio_read_rarc_ASM+0x14>
    165c:	e5831000 	str	r1, [r3]
    1660:	e3a00001 	mov	r0, #1
    1664:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1668:	e12fff1e 	bx	lr

0000166c <audio_write_leftdata_ASM>:
    166c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1670:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1674:	eb000040 	bl	177c <audio_read_wslc_ASM>
    1678:	e3500000 	cmp	r0, #0
    167c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1680:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1684:	03a00000 	moveq	r0, #0
    1688:	012fff1e 	bxeq	lr
    168c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1690:	e59f2130 	ldr	r2, [pc, #304]	; 17c8 <audio_read_rarc_ASM+0x10>
    1694:	e5820000 	str	r0, [r2]
    1698:	e3a00001 	mov	r0, #1
    169c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    16a0:	e12fff1e 	bx	lr

000016a4 <audio_write_rightdata_ASM>:
    16a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    16a8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    16ac:	eb000037 	bl	1790 <audio_read_wsrc_ASM>
    16b0:	e3500000 	cmp	r0, #0
    16b4:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    16b8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    16bc:	03a00000 	moveq	r0, #0
    16c0:	012fff1e 	bxeq	lr
    16c4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    16c8:	e59f20fc 	ldr	r2, [pc, #252]	; 17cc <audio_read_rarc_ASM+0x14>
    16cc:	e5820000 	str	r0, [r2]
    16d0:	e3a00001 	mov	r0, #1
    16d4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    16d8:	e12fff1e 	bx	lr

000016dc <audio_enable_read_fifo_clear_ASM>:
    16dc:	e59f00ec 	ldr	r0, [pc, #236]	; 17d0 <audio_read_rarc_ASM+0x18>
    16e0:	e5901000 	ldr	r1, [r0]
    16e4:	e3811004 	orr	r1, r1, #4
    16e8:	e5801000 	str	r1, [r0]
    16ec:	e12fff1e 	bx	lr

000016f0 <audio_enable_write_fifo_clear_ASM>:
    16f0:	e59f00d8 	ldr	r0, [pc, #216]	; 17d0 <audio_read_rarc_ASM+0x18>
    16f4:	e5901000 	ldr	r1, [r0]
    16f8:	e3811008 	orr	r1, r1, #8
    16fc:	e5801000 	str	r1, [r0]
    1700:	e12fff1e 	bx	lr

00001704 <audio_disable_read_fifo_clear_ASM>:
    1704:	e59f00c4 	ldr	r0, [pc, #196]	; 17d0 <audio_read_rarc_ASM+0x18>
    1708:	e5901000 	ldr	r1, [r0]
    170c:	e3c11004 	bic	r1, r1, #4
    1710:	e5801000 	str	r1, [r0]
    1714:	e12fff1e 	bx	lr

00001718 <audio_disable_write_fifo_clear_ASM>:
    1718:	e59f00b0 	ldr	r0, [pc, #176]	; 17d0 <audio_read_rarc_ASM+0x18>
    171c:	e5901000 	ldr	r1, [r0]
    1720:	e3c11008 	bic	r1, r1, #8
    1724:	e5801000 	str	r1, [r0]
    1728:	e12fff1e 	bx	lr

0000172c <audio_enable_read_int_ASM>:
    172c:	e59f009c 	ldr	r0, [pc, #156]	; 17d0 <audio_read_rarc_ASM+0x18>
    1730:	e5901000 	ldr	r1, [r0]
    1734:	e3811001 	orr	r1, r1, #1
    1738:	e5801000 	str	r1, [r0]
    173c:	e12fff1e 	bx	lr

00001740 <audio_enable_write_int_ASM>:
    1740:	e59f0088 	ldr	r0, [pc, #136]	; 17d0 <audio_read_rarc_ASM+0x18>
    1744:	e5901000 	ldr	r1, [r0]
    1748:	e3811002 	orr	r1, r1, #2
    174c:	e5801000 	str	r1, [r0]
    1750:	e12fff1e 	bx	lr

00001754 <audio_disable_read_int_ASM>:
    1754:	e59f0074 	ldr	r0, [pc, #116]	; 17d0 <audio_read_rarc_ASM+0x18>
    1758:	e5901000 	ldr	r1, [r0]
    175c:	e3c11001 	bic	r1, r1, #1
    1760:	e5801000 	str	r1, [r0]
    1764:	e12fff1e 	bx	lr

00001768 <audio_disable_write_int_ASM>:
    1768:	e59f0060 	ldr	r0, [pc, #96]	; 17d0 <audio_read_rarc_ASM+0x18>
    176c:	e5901000 	ldr	r1, [r0]
    1770:	e3c11002 	bic	r1, r1, #2
    1774:	e5801000 	str	r1, [r0]
    1778:	e12fff1e 	bx	lr

0000177c <audio_read_wslc_ASM>:
    177c:	e59f0050 	ldr	r0, [pc, #80]	; 17d4 <audio_read_rarc_ASM+0x1c>
    1780:	e5900000 	ldr	r0, [r0]
    1784:	e1a00c20 	lsr	r0, r0, #24
    1788:	e20000ff 	and	r0, r0, #255	; 0xff
    178c:	e12fff1e 	bx	lr

00001790 <audio_read_wsrc_ASM>:
    1790:	e59f003c 	ldr	r0, [pc, #60]	; 17d4 <audio_read_rarc_ASM+0x1c>
    1794:	e5900000 	ldr	r0, [r0]
    1798:	e1a00820 	lsr	r0, r0, #16
    179c:	e20000ff 	and	r0, r0, #255	; 0xff
    17a0:	e12fff1e 	bx	lr

000017a4 <audio_read_ralc_ASM>:
    17a4:	e59f0028 	ldr	r0, [pc, #40]	; 17d4 <audio_read_rarc_ASM+0x1c>
    17a8:	e5900000 	ldr	r0, [r0]
    17ac:	e1a00420 	lsr	r0, r0, #8
    17b0:	e20000ff 	and	r0, r0, #255	; 0xff
    17b4:	e12fff1e 	bx	lr

000017b8 <audio_read_rarc_ASM>:
    17b8:	e59f0014 	ldr	r0, [pc, #20]	; 17d4 <audio_read_rarc_ASM+0x1c>
    17bc:	e5900000 	ldr	r0, [r0]
    17c0:	e20000ff 	and	r0, r0, #255	; 0xff
    17c4:	e12fff1e 	bx	lr
    17c8:	ff203048 	.word	0xff203048
    17cc:	ff20304c 	.word	0xff20304c
    17d0:	ff203040 	.word	0xff203040
    17d4:	ff203044 	.word	0xff203044

000017d8 <read_ps2_data_ASM>:
    17d8:	e59f114c 	ldr	r1, [pc, #332]	; 192c <ps2_fifo_ravail+0x4>
    17dc:	e5911000 	ldr	r1, [r1]
    17e0:	e3a02902 	mov	r2, #32768	; 0x8000
    17e4:	e1110002 	tst	r1, r2
    17e8:	03a00000 	moveq	r0, #0
    17ec:	012fff1e 	bxeq	lr
    17f0:	e20120ff 	and	r2, r1, #255	; 0xff
    17f4:	e5c02000 	strb	r2, [r0]
    17f8:	e59f2130 	ldr	r2, [pc, #304]	; 1930 <ps2_fifo_ravail+0x8>
    17fc:	e0010002 	and	r0, r1, r2
    1800:	e1a00820 	lsr	r0, r0, #16
    1804:	e12fff1e 	bx	lr

00001808 <enable_ps2_int_ASM>:
    1808:	e59f011c 	ldr	r0, [pc, #284]	; 192c <ps2_fifo_ravail+0x4>
    180c:	e3a01001 	mov	r1, #1
    1810:	e5c01004 	strb	r1, [r0, #4]
    1814:	e12fff1e 	bx	lr

00001818 <disable_ps2_int_ASM>:
    1818:	e59f010c 	ldr	r0, [pc, #268]	; 192c <ps2_fifo_ravail+0x4>
    181c:	e3a01000 	mov	r1, #0
    1820:	e5c01004 	strb	r1, [r0, #4]
    1824:	e12fff1e 	bx	lr

00001828 <ps2_fifo_data>:
	...

00001928 <ps2_fifo_ravail>:
    1928:	00000000 	.word	0x00000000
    192c:	ff200100 	.word	0xff200100
    1930:	ffff0000 	.word	0xffff0000

00001934 <read_PB_data_ASM>:
    1934:	e59f1074 	ldr	r1, [pc, #116]	; 19b0 <disable_PB_INT_ASM+0x14>
    1938:	e5910000 	ldr	r0, [r1]
    193c:	e12fff1e 	bx	lr

00001940 <PB_data_is_pressed_ASM>:
    1940:	e59f1068 	ldr	r1, [pc, #104]	; 19b0 <disable_PB_INT_ASM+0x14>
    1944:	e5912000 	ldr	r2, [r1]
    1948:	e0000002 	and	r0, r0, r2
    194c:	e3300000 	teq	r0, #0
    1950:	13a00001 	movne	r0, #1
    1954:	e12fff1e 	bx	lr

00001958 <read_PB_edgecap_ASM>:
    1958:	e59f1054 	ldr	r1, [pc, #84]	; 19b4 <disable_PB_INT_ASM+0x18>
    195c:	e5910000 	ldr	r0, [r1]
    1960:	e12fff1e 	bx	lr

00001964 <PB_edgecap_is_pressed_ASM>:
    1964:	e59f1048 	ldr	r1, [pc, #72]	; 19b4 <disable_PB_INT_ASM+0x18>
    1968:	e5912000 	ldr	r2, [r1]
    196c:	e0000002 	and	r0, r0, r2
    1970:	e3300000 	teq	r0, #0
    1974:	13a00001 	movne	r0, #1
    1978:	e12fff1e 	bx	lr

0000197c <PB_clear_edgecp_ASM>:
    197c:	e59f1030 	ldr	r1, [pc, #48]	; 19b4 <disable_PB_INT_ASM+0x18>
    1980:	e5810000 	str	r0, [r1]
    1984:	e12fff1e 	bx	lr

00001988 <enable_PB_INT_ASM>:
    1988:	e59f1028 	ldr	r1, [pc, #40]	; 19b8 <disable_PB_INT_ASM+0x1c>
    198c:	e5912000 	ldr	r2, [r1]
    1990:	e1800002 	orr	r0, r0, r2
    1994:	e5810000 	str	r0, [r1]
    1998:	e12fff1e 	bx	lr

0000199c <disable_PB_INT_ASM>:
    199c:	e59f1014 	ldr	r1, [pc, #20]	; 19b8 <disable_PB_INT_ASM+0x1c>
    19a0:	e5912000 	ldr	r2, [r1]
    19a4:	e1c00002 	bic	r0, r0, r2
    19a8:	e5810000 	str	r0, [r1]
    19ac:	e12fff1e 	bx	lr
    19b0:	ff200050 	.word	0xff200050
    19b4:	ff20005c 	.word	0xff20005c
    19b8:	ff200058 	.word	0xff200058

000019bc <read_slider_switches_ASM>:
    19bc:	e59f1004 	ldr	r1, [pc, #4]	; 19c8 <read_slider_switches_ASM+0xc>
    19c0:	e5910000 	ldr	r0, [r1]
    19c4:	e12fff1e 	bx	lr
    19c8:	ff200040 	.word	0xff200040

000019cc <VGA_clear_charbuff_ASM>:
    19cc:	e92d0030 	push	{r4, r5}
    19d0:	e3a02000 	mov	r2, #0
    19d4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    19d8:	e3a00000 	mov	r0, #0

000019dc <CHAR_LOOPX>:
    19dc:	e3a01000 	mov	r1, #0
    19e0:	e0834000 	add	r4, r3, r0

000019e4 <CHAR_LOOPY>:
    19e4:	e0845381 	add	r5, r4, r1, lsl #7
    19e8:	e5c52000 	strb	r2, [r5]
    19ec:	e2811001 	add	r1, r1, #1
    19f0:	e351003c 	cmp	r1, #60	; 0x3c
    19f4:	bafffffa 	blt	19e4 <CHAR_LOOPY>
    19f8:	e2800001 	add	r0, r0, #1
    19fc:	e3500050 	cmp	r0, #80	; 0x50
    1a00:	bafffff5 	blt	19dc <CHAR_LOOPX>
    1a04:	e8bd0030 	pop	{r4, r5}
    1a08:	e12fff1e 	bx	lr

00001a0c <VGA_clear_pixelbuff_ASM>:
    1a0c:	e92d0030 	push	{r4, r5}
    1a10:	e3a02000 	mov	r2, #0
    1a14:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1a18:	e3a00000 	mov	r0, #0

00001a1c <PIXEL_LOOPX>:
    1a1c:	e3a01000 	mov	r1, #0
    1a20:	e0834080 	add	r4, r3, r0, lsl #1

00001a24 <PIXEL_LOOPY>:
    1a24:	e0845501 	add	r5, r4, r1, lsl #10
    1a28:	e1c520b0 	strh	r2, [r5]
    1a2c:	e2811001 	add	r1, r1, #1
    1a30:	e35100f0 	cmp	r1, #240	; 0xf0
    1a34:	bafffffa 	blt	1a24 <PIXEL_LOOPY>
    1a38:	e2800001 	add	r0, r0, #1
    1a3c:	e3500d05 	cmp	r0, #320	; 0x140
    1a40:	bafffff5 	blt	1a1c <PIXEL_LOOPX>
    1a44:	e8bd0030 	pop	{r4, r5}
    1a48:	e12fff1e 	bx	lr

00001a4c <VGA_write_char_ASM>:
    1a4c:	e3500000 	cmp	r0, #0
    1a50:	b12fff1e 	bxlt	lr
    1a54:	e3510000 	cmp	r1, #0
    1a58:	b12fff1e 	bxlt	lr
    1a5c:	e350004f 	cmp	r0, #79	; 0x4f
    1a60:	c12fff1e 	bxgt	lr
    1a64:	e351003b 	cmp	r1, #59	; 0x3b
    1a68:	c12fff1e 	bxgt	lr
    1a6c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1a70:	e0833000 	add	r3, r3, r0
    1a74:	e0833381 	add	r3, r3, r1, lsl #7
    1a78:	e5c32000 	strb	r2, [r3]
    1a7c:	e12fff1e 	bx	lr

00001a80 <VGA_write_byte_ASM>:
    1a80:	e3500000 	cmp	r0, #0
    1a84:	b12fff1e 	bxlt	lr
    1a88:	e3510000 	cmp	r1, #0
    1a8c:	b12fff1e 	bxlt	lr
    1a90:	e350004e 	cmp	r0, #78	; 0x4e
    1a94:	c12fff1e 	bxgt	lr
    1a98:	e351003b 	cmp	r1, #59	; 0x3b
    1a9c:	c12fff1e 	bxgt	lr
    1aa0:	e92d0030 	push	{r4, r5}
    1aa4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1aa8:	e20250f0 	and	r5, r2, #240	; 0xf0
    1aac:	e1a05225 	lsr	r5, r5, #4
    1ab0:	e202400f 	and	r4, r2, #15
    1ab4:	e59f2068 	ldr	r2, [pc, #104]	; 1b24 <HEX_ASCII+0x10>
    1ab8:	e7d25005 	ldrb	r5, [r2, r5]
    1abc:	e7d24004 	ldrb	r4, [r2, r4]
    1ac0:	e0833000 	add	r3, r3, r0
    1ac4:	e0833381 	add	r3, r3, r1, lsl #7
    1ac8:	e5c35000 	strb	r5, [r3]
    1acc:	e2833001 	add	r3, r3, #1
    1ad0:	e5c34000 	strb	r4, [r3]
    1ad4:	e8bd0030 	pop	{r4, r5}
    1ad8:	e12fff1e 	bx	lr

00001adc <VGA_draw_point_ASM>:
    1adc:	e59f3044 	ldr	r3, [pc, #68]	; 1b28 <HEX_ASCII+0x14>
    1ae0:	e3500000 	cmp	r0, #0
    1ae4:	b12fff1e 	bxlt	lr
    1ae8:	e3510000 	cmp	r1, #0
    1aec:	b12fff1e 	bxlt	lr
    1af0:	e1500003 	cmp	r0, r3
    1af4:	c12fff1e 	bxgt	lr
    1af8:	e35100ef 	cmp	r1, #239	; 0xef
    1afc:	c12fff1e 	bxgt	lr
    1b00:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1b04:	e0833080 	add	r3, r3, r0, lsl #1
    1b08:	e0833501 	add	r3, r3, r1, lsl #10
    1b0c:	e1c320b0 	strh	r2, [r3]
    1b10:	e12fff1e 	bx	lr

00001b14 <HEX_ASCII>:
    1b14:	33323130 	.word	0x33323130
    1b18:	37363534 	.word	0x37363534
    1b1c:	42413938 	.word	0x42413938
    1b20:	46454443 	.word	0x46454443
    1b24:	00001b14 	.word	0x00001b14
    1b28:	0000013f 	.word	0x0000013f

00001b2c <__aeabi_frsub>:
    1b2c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1b30:	ea000000 	b	1b38 <__addsf3>

00001b34 <__aeabi_fsub>:
    1b34:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001b38 <__addsf3>:
    1b38:	e1b02080 	lsls	r2, r0, #1
    1b3c:	11b03081 	lslsne	r3, r1, #1
    1b40:	11320003 	teqne	r2, r3
    1b44:	11f0cc42 	mvnsne	r12, r2, asr #24
    1b48:	11f0cc43 	mvnsne	r12, r3, asr #24
    1b4c:	0a000047 	beq	1c70 <__addsf3+0x138>
    1b50:	e1a02c22 	lsr	r2, r2, #24
    1b54:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    1b58:	c0822003 	addgt	r2, r2, r3
    1b5c:	c0201001 	eorgt	r1, r0, r1
    1b60:	c0210000 	eorgt	r0, r1, r0
    1b64:	c0201001 	eorgt	r1, r0, r1
    1b68:	b2633000 	rsblt	r3, r3, #0
    1b6c:	e3530019 	cmp	r3, #25
    1b70:	812fff1e 	bxhi	lr
    1b74:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1b78:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1b7c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    1b80:	12600000 	rsbne	r0, r0, #0
    1b84:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b88:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    1b8c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    1b90:	12611000 	rsbne	r1, r1, #0
    1b94:	e1320003 	teq	r2, r3
    1b98:	0a00002e 	beq	1c58 <__addsf3+0x120>
    1b9c:	e2422001 	sub	r2, r2, #1
    1ba0:	e0900351 	adds	r0, r0, r1, asr r3
    1ba4:	e2633020 	rsb	r3, r3, #32
    1ba8:	e1a01311 	lsl	r1, r1, r3
    1bac:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1bb0:	5a000001 	bpl	1bbc <__addsf3+0x84>
    1bb4:	e2711000 	rsbs	r1, r1, #0
    1bb8:	e2e00000 	rsc	r0, r0, #0
    1bbc:	e3500502 	cmp	r0, #8388608	; 0x800000
    1bc0:	3a00000b 	bcc	1bf4 <__addsf3+0xbc>
    1bc4:	e3500401 	cmp	r0, #16777216	; 0x1000000
    1bc8:	3a000004 	bcc	1be0 <__addsf3+0xa8>
    1bcc:	e1b000a0 	lsrs	r0, r0, #1
    1bd0:	e1a01061 	rrx	r1, r1
    1bd4:	e2822001 	add	r2, r2, #1
    1bd8:	e35200fe 	cmp	r2, #254	; 0xfe
    1bdc:	2a000038 	bcs	1cc4 <__addsf3+0x18c>
    1be0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1be4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1be8:	03c00001 	biceq	r0, r0, #1
    1bec:	e1800003 	orr	r0, r0, r3
    1bf0:	e12fff1e 	bx	lr
    1bf4:	e1b01081 	lsls	r1, r1, #1
    1bf8:	e0a00000 	adc	r0, r0, r0
    1bfc:	e3100502 	tst	r0, #8388608	; 0x800000
    1c00:	e2422001 	sub	r2, r2, #1
    1c04:	1afffff5 	bne	1be0 <__addsf3+0xa8>
    1c08:	e1b0c620 	lsrs	r12, r0, #12
    1c0c:	01a00600 	lsleq	r0, r0, #12
    1c10:	0242200c 	subeq	r2, r2, #12
    1c14:	e31008ff 	tst	r0, #16711680	; 0xff0000
    1c18:	01a00400 	lsleq	r0, r0, #8
    1c1c:	02422008 	subeq	r2, r2, #8
    1c20:	e310060f 	tst	r0, #15728640	; 0xf00000
    1c24:	01a00200 	lsleq	r0, r0, #4
    1c28:	02422004 	subeq	r2, r2, #4
    1c2c:	e3100503 	tst	r0, #12582912	; 0xc00000
    1c30:	01a00100 	lsleq	r0, r0, #2
    1c34:	02422002 	subeq	r2, r2, #2
    1c38:	e3500502 	cmp	r0, #8388608	; 0x800000
    1c3c:	31a00080 	lslcc	r0, r0, #1
    1c40:	e2d22000 	sbcs	r2, r2, #0
    1c44:	a0800b82 	addge	r0, r0, r2, lsl #23
    1c48:	b2622000 	rsblt	r2, r2, #0
    1c4c:	a1800003 	orrge	r0, r0, r3
    1c50:	b1830230 	orrlt	r0, r3, r0, lsr r2
    1c54:	e12fff1e 	bx	lr
    1c58:	e3320000 	teq	r2, #0
    1c5c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    1c60:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    1c64:	02822001 	addeq	r2, r2, #1
    1c68:	12433001 	subne	r3, r3, #1
    1c6c:	eaffffca 	b	1b9c <__addsf3+0x64>
    1c70:	e1a03081 	lsl	r3, r1, #1
    1c74:	e1f0cc42 	mvns	r12, r2, asr #24
    1c78:	11f0cc43 	mvnsne	r12, r3, asr #24
    1c7c:	0a000013 	beq	1cd0 <__addsf3+0x198>
    1c80:	e1320003 	teq	r2, r3
    1c84:	0a000002 	beq	1c94 <__addsf3+0x15c>
    1c88:	e3320000 	teq	r2, #0
    1c8c:	01a00001 	moveq	r0, r1
    1c90:	e12fff1e 	bx	lr
    1c94:	e1300001 	teq	r0, r1
    1c98:	13a00000 	movne	r0, #0
    1c9c:	112fff1e 	bxne	lr
    1ca0:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    1ca4:	1a000002 	bne	1cb4 <__addsf3+0x17c>
    1ca8:	e1b00080 	lsls	r0, r0, #1
    1cac:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    1cb0:	e12fff1e 	bx	lr
    1cb4:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    1cb8:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    1cbc:	312fff1e 	bxcc	lr
    1cc0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1cc4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    1cc8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1ccc:	e12fff1e 	bx	lr
    1cd0:	e1f02c42 	mvns	r2, r2, asr #24
    1cd4:	11a00001 	movne	r0, r1
    1cd8:	01f03c43 	mvnseq	r3, r3, asr #24
    1cdc:	11a01000 	movne	r1, r0
    1ce0:	e1b02480 	lsls	r2, r0, #9
    1ce4:	01b03481 	lslseq	r3, r1, #9
    1ce8:	01300001 	teqeq	r0, r1
    1cec:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    1cf0:	e12fff1e 	bx	lr

00001cf4 <__aeabi_ui2f>:
    1cf4:	e3a03000 	mov	r3, #0
    1cf8:	ea000001 	b	1d04 <__aeabi_i2f+0x8>

00001cfc <__aeabi_i2f>:
    1cfc:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    1d00:	42600000 	rsbmi	r0, r0, #0
    1d04:	e1b0c000 	movs	r12, r0
    1d08:	012fff1e 	bxeq	lr
    1d0c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    1d10:	e1a01000 	mov	r1, r0
    1d14:	e3a00000 	mov	r0, #0
    1d18:	ea00000f 	b	1d5c <__aeabi_l2f+0x30>

00001d1c <__aeabi_ul2f>:
    1d1c:	e1902001 	orrs	r2, r0, r1
    1d20:	012fff1e 	bxeq	lr
    1d24:	e3a03000 	mov	r3, #0
    1d28:	ea000005 	b	1d44 <__aeabi_l2f+0x18>

00001d2c <__aeabi_l2f>:
    1d2c:	e1902001 	orrs	r2, r0, r1
    1d30:	012fff1e 	bxeq	lr
    1d34:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    1d38:	5a000001 	bpl	1d44 <__aeabi_l2f+0x18>
    1d3c:	e2700000 	rsbs	r0, r0, #0
    1d40:	e2e11000 	rsc	r1, r1, #0
    1d44:	e1b0c001 	movs	r12, r1
    1d48:	01a0c000 	moveq	r12, r0
    1d4c:	01a01000 	moveq	r1, r0
    1d50:	03a00000 	moveq	r0, #0
    1d54:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    1d58:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    1d5c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    1d60:	e3a02017 	mov	r2, #23
    1d64:	e35c0801 	cmp	r12, #65536	; 0x10000
    1d68:	21a0c82c 	lsrcs	r12, r12, #16
    1d6c:	22422010 	subcs	r2, r2, #16
    1d70:	e35c0c01 	cmp	r12, #256	; 0x100
    1d74:	21a0c42c 	lsrcs	r12, r12, #8
    1d78:	22422008 	subcs	r2, r2, #8
    1d7c:	e35c0010 	cmp	r12, #16
    1d80:	21a0c22c 	lsrcs	r12, r12, #4
    1d84:	22422004 	subcs	r2, r2, #4
    1d88:	e35c0004 	cmp	r12, #4
    1d8c:	22422002 	subcs	r2, r2, #2
    1d90:	304220ac 	subcc	r2, r2, r12, lsr #1
    1d94:	e05221ac 	subs	r2, r2, r12, lsr #3
    1d98:	e0433b82 	sub	r3, r3, r2, lsl #23
    1d9c:	ba000006 	blt	1dbc <__aeabi_l2f+0x90>
    1da0:	e0833211 	add	r3, r3, r1, lsl r2
    1da4:	e1a0c210 	lsl	r12, r0, r2
    1da8:	e2622020 	rsb	r2, r2, #32
    1dac:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1db0:	e0a30230 	adc	r0, r3, r0, lsr r2
    1db4:	03c00001 	biceq	r0, r0, #1
    1db8:	e12fff1e 	bx	lr
    1dbc:	e2822020 	add	r2, r2, #32
    1dc0:	e1a0c211 	lsl	r12, r1, r2
    1dc4:	e2622020 	rsb	r2, r2, #32
    1dc8:	e190008c 	orrs	r0, r0, r12, lsl #1
    1dcc:	e0a30231 	adc	r0, r3, r1, lsr r2
    1dd0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1dd4:	e12fff1e 	bx	lr

00001dd8 <__aeabi_fmul>:
    1dd8:	e3a0c0ff 	mov	r12, #255	; 0xff
    1ddc:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1de0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1de4:	1132000c 	teqne	r2, r12
    1de8:	1133000c 	teqne	r3, r12
    1dec:	0a00003e 	beq	1eec <__aeabi_fmul+0x114>
    1df0:	e0822003 	add	r2, r2, r3
    1df4:	e020c001 	eor	r12, r0, r1
    1df8:	e1b00480 	lsls	r0, r0, #9
    1dfc:	11b01481 	lslsne	r1, r1, #9
    1e00:	0a000010 	beq	1e48 <__aeabi_fmul+0x70>
    1e04:	e3a03302 	mov	r3, #134217728	; 0x8000000
    1e08:	e18302a0 	orr	r0, r3, r0, lsr #5
    1e0c:	e18312a1 	orr	r1, r3, r1, lsr #5
    1e10:	e0813190 	umull	r3, r1, r0, r1
    1e14:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1e18:	e3510502 	cmp	r1, #8388608	; 0x800000
    1e1c:	31a01081 	lslcc	r1, r1, #1
    1e20:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    1e24:	31a03083 	lslcc	r3, r3, #1
    1e28:	e1800001 	orr	r0, r0, r1
    1e2c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    1e30:	e35200fd 	cmp	r2, #253	; 0xfd
    1e34:	8a00000f 	bhi	1e78 <__aeabi_fmul+0xa0>
    1e38:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    1e3c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1e40:	03c00001 	biceq	r0, r0, #1
    1e44:	e12fff1e 	bx	lr
    1e48:	e3300000 	teq	r0, #0
    1e4c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1e50:	01a01481 	lsleq	r1, r1, #9
    1e54:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1e58:	e18004a1 	orr	r0, r0, r1, lsr #9
    1e5c:	e252207f 	subs	r2, r2, #127	; 0x7f
    1e60:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1e64:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1e68:	c12fff1e 	bxgt	lr
    1e6c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1e70:	e3a03000 	mov	r3, #0
    1e74:	e2522001 	subs	r2, r2, #1
    1e78:	ca000035 	bgt	1f54 <__aeabi_fmul+0x17c>
    1e7c:	e3720019 	cmn	r2, #25
    1e80:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    1e84:	d12fff1e 	bxle	lr
    1e88:	e2622000 	rsb	r2, r2, #0
    1e8c:	e1b01080 	lsls	r1, r0, #1
    1e90:	e1a01231 	lsr	r1, r1, r2
    1e94:	e2622020 	rsb	r2, r2, #32
    1e98:	e1a0c210 	lsl	r12, r0, r2
    1e9c:	e1b00061 	rrxs	r0, r1
    1ea0:	e2a00000 	adc	r0, r0, #0
    1ea4:	e193308c 	orrs	r3, r3, r12, lsl #1
    1ea8:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1eac:	e12fff1e 	bx	lr
    1eb0:	e3320000 	teq	r2, #0
    1eb4:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1eb8:	01a00080 	lsleq	r0, r0, #1
    1ebc:	03100502 	tsteq	r0, #8388608	; 0x800000
    1ec0:	02422001 	subeq	r2, r2, #1
    1ec4:	0afffffb 	beq	1eb8 <__aeabi_fmul+0xe0>
    1ec8:	e180000c 	orr	r0, r0, r12
    1ecc:	e3330000 	teq	r3, #0
    1ed0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1ed4:	01a01081 	lsleq	r1, r1, #1
    1ed8:	03110502 	tsteq	r1, #8388608	; 0x800000
    1edc:	02433001 	subeq	r3, r3, #1
    1ee0:	0afffffb 	beq	1ed4 <__aeabi_fmul+0xfc>
    1ee4:	e181100c 	orr	r1, r1, r12
    1ee8:	eaffffc0 	b	1df0 <__aeabi_fmul+0x18>
    1eec:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1ef0:	e132000c 	teq	r2, r12
    1ef4:	1133000c 	teqne	r3, r12
    1ef8:	0a000005 	beq	1f14 <__aeabi_fmul+0x13c>
    1efc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1f00:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1f04:	1affffe9 	bne	1eb0 <__aeabi_fmul+0xd8>
    1f08:	e0200001 	eor	r0, r0, r1
    1f0c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1f10:	e12fff1e 	bx	lr
    1f14:	e3300000 	teq	r0, #0
    1f18:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    1f1c:	01a00001 	moveq	r0, r1
    1f20:	13310000 	teqne	r1, #0
    1f24:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    1f28:	0a00000d 	beq	1f64 <__aeabi_fmul+0x18c>
    1f2c:	e132000c 	teq	r2, r12
    1f30:	1a000001 	bne	1f3c <__aeabi_fmul+0x164>
    1f34:	e1b02480 	lsls	r2, r0, #9
    1f38:	1a000009 	bne	1f64 <__aeabi_fmul+0x18c>
    1f3c:	e133000c 	teq	r3, r12
    1f40:	1a000002 	bne	1f50 <__aeabi_fmul+0x178>
    1f44:	e1b03481 	lsls	r3, r1, #9
    1f48:	11a00001 	movne	r0, r1
    1f4c:	1a000004 	bne	1f64 <__aeabi_fmul+0x18c>
    1f50:	e0200001 	eor	r0, r0, r1
    1f54:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1f58:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1f5c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1f60:	e12fff1e 	bx	lr
    1f64:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1f68:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    1f6c:	e12fff1e 	bx	lr

00001f70 <__aeabi_fdiv>:
    1f70:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f74:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1f78:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1f7c:	1132000c 	teqne	r2, r12
    1f80:	1133000c 	teqne	r3, r12
    1f84:	0a00003a 	beq	2074 <__aeabi_fdiv+0x104>
    1f88:	e0422003 	sub	r2, r2, r3
    1f8c:	e020c001 	eor	r12, r0, r1
    1f90:	e1b01481 	lsls	r1, r1, #9
    1f94:	e1a00480 	lsl	r0, r0, #9
    1f98:	0a00001c 	beq	2010 <__aeabi_fdiv+0xa0>
    1f9c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    1fa0:	e1831221 	orr	r1, r3, r1, lsr #4
    1fa4:	e1833220 	orr	r3, r3, r0, lsr #4
    1fa8:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1fac:	e1530001 	cmp	r3, r1
    1fb0:	31a03083 	lslcc	r3, r3, #1
    1fb4:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1fb8:	e3a0c502 	mov	r12, #8388608	; 0x800000
    1fbc:	e1530001 	cmp	r3, r1
    1fc0:	20433001 	subcs	r3, r3, r1
    1fc4:	2180000c 	orrcs	r0, r0, r12
    1fc8:	e15300a1 	cmp	r3, r1, lsr #1
    1fcc:	204330a1 	subcs	r3, r3, r1, lsr #1
    1fd0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1fd4:	e1530121 	cmp	r3, r1, lsr #2
    1fd8:	20433121 	subcs	r3, r3, r1, lsr #2
    1fdc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1fe0:	e15301a1 	cmp	r3, r1, lsr #3
    1fe4:	204331a1 	subcs	r3, r3, r1, lsr #3
    1fe8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1fec:	e1b03203 	lsls	r3, r3, #4
    1ff0:	11b0c22c 	lsrsne	r12, r12, #4
    1ff4:	1afffff0 	bne	1fbc <__aeabi_fdiv+0x4c>
    1ff8:	e35200fd 	cmp	r2, #253	; 0xfd
    1ffc:	8affff9d 	bhi	1e78 <__aeabi_fmul+0xa0>
    2000:	e1530001 	cmp	r3, r1
    2004:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2008:	03c00001 	biceq	r0, r0, #1
    200c:	e12fff1e 	bx	lr
    2010:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2014:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2018:	e292207f 	adds	r2, r2, #127	; 0x7f
    201c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2020:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2024:	c12fff1e 	bxgt	lr
    2028:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    202c:	e3a03000 	mov	r3, #0
    2030:	e2522001 	subs	r2, r2, #1
    2034:	eaffff8f 	b	1e78 <__aeabi_fmul+0xa0>
    2038:	e3320000 	teq	r2, #0
    203c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2040:	01a00080 	lsleq	r0, r0, #1
    2044:	03100502 	tsteq	r0, #8388608	; 0x800000
    2048:	02422001 	subeq	r2, r2, #1
    204c:	0afffffb 	beq	2040 <__aeabi_fdiv+0xd0>
    2050:	e180000c 	orr	r0, r0, r12
    2054:	e3330000 	teq	r3, #0
    2058:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    205c:	01a01081 	lsleq	r1, r1, #1
    2060:	03110502 	tsteq	r1, #8388608	; 0x800000
    2064:	02433001 	subeq	r3, r3, #1
    2068:	0afffffb 	beq	205c <__aeabi_fdiv+0xec>
    206c:	e181100c 	orr	r1, r1, r12
    2070:	eaffffc4 	b	1f88 <__aeabi_fdiv+0x18>
    2074:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2078:	e132000c 	teq	r2, r12
    207c:	1a000005 	bne	2098 <__aeabi_fdiv+0x128>
    2080:	e1b02480 	lsls	r2, r0, #9
    2084:	1affffb6 	bne	1f64 <__aeabi_fmul+0x18c>
    2088:	e133000c 	teq	r3, r12
    208c:	1affffaf 	bne	1f50 <__aeabi_fmul+0x178>
    2090:	e1a00001 	mov	r0, r1
    2094:	eaffffb2 	b	1f64 <__aeabi_fmul+0x18c>
    2098:	e133000c 	teq	r3, r12
    209c:	1a000003 	bne	20b0 <__aeabi_fdiv+0x140>
    20a0:	e1b03481 	lsls	r3, r1, #9
    20a4:	0affff97 	beq	1f08 <__aeabi_fmul+0x130>
    20a8:	e1a00001 	mov	r0, r1
    20ac:	eaffffac 	b	1f64 <__aeabi_fmul+0x18c>
    20b0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    20b4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    20b8:	1affffde 	bne	2038 <__aeabi_fdiv+0xc8>
    20bc:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    20c0:	1affffa2 	bne	1f50 <__aeabi_fmul+0x178>
    20c4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    20c8:	1affff8e 	bne	1f08 <__aeabi_fmul+0x130>
    20cc:	eaffffa4 	b	1f64 <__aeabi_fmul+0x18c>

000020d0 <__aeabi_f2iz>:
    20d0:	e1a02080 	lsl	r2, r0, #1
    20d4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    20d8:	3a000008 	bcc	2100 <__aeabi_f2iz+0x30>
    20dc:	e3a0309e 	mov	r3, #158	; 0x9e
    20e0:	e0532c22 	subs	r2, r3, r2, lsr #24
    20e4:	9a000007 	bls	2108 <__aeabi_f2iz+0x38>
    20e8:	e1a03400 	lsl	r3, r0, #8
    20ec:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    20f0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    20f4:	e1a00233 	lsr	r0, r3, r2
    20f8:	12600000 	rsbne	r0, r0, #0
    20fc:	e12fff1e 	bx	lr
    2100:	e3a00000 	mov	r0, #0
    2104:	e12fff1e 	bx	lr
    2108:	e3720061 	cmn	r2, #97	; 0x61
    210c:	1a000001 	bne	2118 <__aeabi_f2iz+0x48>
    2110:	e1b02480 	lsls	r2, r0, #9
    2114:	1a000002 	bne	2124 <__aeabi_f2iz+0x54>
    2118:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    211c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2120:	e12fff1e 	bx	lr
    2124:	e3a00000 	mov	r0, #0
    2128:	e12fff1e 	bx	lr

0000212c <atexit>:
    212c:	e1a01000 	mov	r1, r0
    2130:	e3a00000 	mov	r0, #0
    2134:	e92d4008 	push	{r3, lr}
    2138:	e1a02000 	mov	r2, r0
    213c:	e1a03000 	mov	r3, r0
    2140:	eb00000e 	bl	2180 <__register_exitproc>
    2144:	e8bd4008 	pop	{r3, lr}
    2148:	e12fff1e 	bx	lr

0000214c <exit>:
    214c:	e92d4008 	push	{r3, lr}
    2150:	e3a01000 	mov	r1, #0
    2154:	e1a04000 	mov	r4, r0
    2158:	eb000045 	bl	2274 <__call_exitprocs>
    215c:	e59f3018 	ldr	r3, [pc, #24]	; 217c <exit+0x30>
    2160:	e5930000 	ldr	r0, [r3]
    2164:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2168:	e3530000 	cmp	r3, #0
    216c:	11a0e00f 	movne	lr, pc
    2170:	112fff13 	bxne	r3
    2174:	e1a00004 	mov	r0, r4
    2178:	eb0000c9 	bl	24a4 <_exit>
    217c:	000025c8 	.word	0x000025c8

00002180 <__register_exitproc>:
    2180:	e59fc0e4 	ldr	r12, [pc, #228]	; 226c <__register_exitproc+0xec>
    2184:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2188:	e59c4000 	ldr	r4, [r12]
    218c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2190:	e35c0000 	cmp	r12, #0
    2194:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2198:	e59c5004 	ldr	r5, [r12, #4]
    219c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    21a0:	e355001f 	cmp	r5, #31
    21a4:	e24dd010 	sub	sp, sp, #16
    21a8:	e1a06000 	mov	r6, r0
    21ac:	da000015 	ble	2208 <__register_exitproc+0x88>
    21b0:	e59f00b8 	ldr	r0, [pc, #184]	; 2270 <__register_exitproc+0xf0>
    21b4:	e3500000 	cmp	r0, #0
    21b8:	1a000001 	bne	21c4 <__register_exitproc+0x44>
    21bc:	e3e00000 	mvn	r0, #0
    21c0:	ea000018 	b	2228 <__register_exitproc+0xa8>
    21c4:	e3a00e19 	mov	r0, #400	; 0x190
    21c8:	e58d100c 	str	r1, [sp, #12]
    21cc:	e58d2008 	str	r2, [sp, #8]
    21d0:	e58d3004 	str	r3, [sp, #4]
    21d4:	e320f000 	nop	{0}
    21d8:	e250c000 	subs	r12, r0, #0
    21dc:	e59d100c 	ldr	r1, [sp, #12]
    21e0:	e59d2008 	ldr	r2, [sp, #8]
    21e4:	e59d3004 	ldr	r3, [sp, #4]
    21e8:	0afffff3 	beq	21bc <__register_exitproc+0x3c>
    21ec:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    21f0:	e3a00000 	mov	r0, #0
    21f4:	e58c0004 	str	r0, [r12, #4]
    21f8:	e58c5000 	str	r5, [r12]
    21fc:	e584c148 	str	r12, [r4, #328]	; 0x148
    2200:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2204:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2208:	e3560000 	cmp	r6, #0
    220c:	e59c4004 	ldr	r4, [r12, #4]
    2210:	1a000007 	bne	2234 <__register_exitproc+0xb4>
    2214:	e2843002 	add	r3, r4, #2
    2218:	e2844001 	add	r4, r4, #1
    221c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2220:	e58c4004 	str	r4, [r12, #4]
    2224:	e3a00000 	mov	r0, #0
    2228:	e28dd010 	add	sp, sp, #16
    222c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2230:	e12fff1e 	bx	lr
    2234:	e3a00001 	mov	r0, #1
    2238:	e1a00410 	lsl	r0, r0, r4
    223c:	e08c8104 	add	r8, r12, r4, lsl #2
    2240:	e3560002 	cmp	r6, #2
    2244:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2248:	e5883108 	str	r3, [r8, #264]	; 0x108
    224c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2250:	e1877000 	orr	r7, r7, r0
    2254:	01830000 	orreq	r0, r3, r0
    2258:	e1a05008 	mov	r5, r8
    225c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2260:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2264:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2268:	eaffffe9 	b	2214 <__register_exitproc+0x94>
    226c:	000025c8 	.word	0x000025c8
    2270:	00000000 	.word	0x00000000

00002274 <__call_exitprocs>:
    2274:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2278:	e59f3168 	ldr	r3, [pc, #360]	; 23e8 <__call_exitprocs+0x174>
    227c:	e5933000 	ldr	r3, [r3]
    2280:	e24dd014 	sub	sp, sp, #20
    2284:	e58d3004 	str	r3, [sp, #4]
    2288:	e2833f52 	add	r3, r3, #328	; 0x148
    228c:	e58d0008 	str	r0, [sp, #8]
    2290:	e58d300c 	str	r3, [sp, #12]
    2294:	e1a07001 	mov	r7, r1
    2298:	e3a08001 	mov	r8, #1
    229c:	e59d3004 	ldr	r3, [sp, #4]
    22a0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    22a4:	e3560000 	cmp	r6, #0
    22a8:	e59db00c 	ldr	r11, [sp, #12]
    22ac:	0a000033 	beq	2380 <__call_exitprocs+0x10c>
    22b0:	e5965004 	ldr	r5, [r6, #4]
    22b4:	e2554001 	subs	r4, r5, #1
    22b8:	5286a088 	addpl	r10, r6, #136	; 0x88
    22bc:	5285501f 	addpl	r5, r5, #31
    22c0:	508a5105 	addpl	r5, r10, r5, lsl #2
    22c4:	5a000007 	bpl	22e8 <__call_exitprocs+0x74>
    22c8:	ea000029 	b	2374 <__call_exitprocs+0x100>
    22cc:	e5953000 	ldr	r3, [r5]
    22d0:	e1530007 	cmp	r3, r7
    22d4:	0a000005 	beq	22f0 <__call_exitprocs+0x7c>
    22d8:	e2444001 	sub	r4, r4, #1
    22dc:	e3740001 	cmn	r4, #1
    22e0:	e2455004 	sub	r5, r5, #4
    22e4:	0a000022 	beq	2374 <__call_exitprocs+0x100>
    22e8:	e3570000 	cmp	r7, #0
    22ec:	1afffff6 	bne	22cc <__call_exitprocs+0x58>
    22f0:	e5963004 	ldr	r3, [r6, #4]
    22f4:	e06a2005 	rsb	r2, r10, r5
    22f8:	e2433001 	sub	r3, r3, #1
    22fc:	e0862002 	add	r2, r6, r2
    2300:	e1530004 	cmp	r3, r4
    2304:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2308:	13a01000 	movne	r1, #0
    230c:	05864004 	streq	r4, [r6, #4]
    2310:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2314:	e3530000 	cmp	r3, #0
    2318:	0affffee 	beq	22d8 <__call_exitprocs+0x64>
    231c:	e1a02418 	lsl	r2, r8, r4
    2320:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2324:	e1120001 	tst	r2, r1
    2328:	e5969004 	ldr	r9, [r6, #4]
    232c:	0a000016 	beq	238c <__call_exitprocs+0x118>
    2330:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2334:	e1120001 	tst	r2, r1
    2338:	1a000016 	bne	2398 <__call_exitprocs+0x124>
    233c:	e59d0008 	ldr	r0, [sp, #8]
    2340:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2344:	e1a0e00f 	mov	lr, pc
    2348:	e12fff13 	bx	r3
    234c:	e5963004 	ldr	r3, [r6, #4]
    2350:	e1530009 	cmp	r3, r9
    2354:	1affffd0 	bne	229c <__call_exitprocs+0x28>
    2358:	e59b3000 	ldr	r3, [r11]
    235c:	e1530006 	cmp	r3, r6
    2360:	1affffcd 	bne	229c <__call_exitprocs+0x28>
    2364:	e2444001 	sub	r4, r4, #1
    2368:	e3740001 	cmn	r4, #1
    236c:	e2455004 	sub	r5, r5, #4
    2370:	1affffdc 	bne	22e8 <__call_exitprocs+0x74>
    2374:	e59f1070 	ldr	r1, [pc, #112]	; 23ec <__call_exitprocs+0x178>
    2378:	e3510000 	cmp	r1, #0
    237c:	1a000009 	bne	23a8 <__call_exitprocs+0x134>
    2380:	e28dd014 	add	sp, sp, #20
    2384:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2388:	e12fff1e 	bx	lr
    238c:	e1a0e00f 	mov	lr, pc
    2390:	e12fff13 	bx	r3
    2394:	eaffffec 	b	234c <__call_exitprocs+0xd8>
    2398:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    239c:	e1a0e00f 	mov	lr, pc
    23a0:	e12fff13 	bx	r3
    23a4:	eaffffe8 	b	234c <__call_exitprocs+0xd8>
    23a8:	e5963004 	ldr	r3, [r6, #4]
    23ac:	e3530000 	cmp	r3, #0
    23b0:	e5963000 	ldr	r3, [r6]
    23b4:	1a000008 	bne	23dc <__call_exitprocs+0x168>
    23b8:	e3530000 	cmp	r3, #0
    23bc:	0a000006 	beq	23dc <__call_exitprocs+0x168>
    23c0:	e1a00006 	mov	r0, r6
    23c4:	e58b3000 	str	r3, [r11]
    23c8:	e320f000 	nop	{0}
    23cc:	e59b6000 	ldr	r6, [r11]
    23d0:	e3560000 	cmp	r6, #0
    23d4:	1affffb5 	bne	22b0 <__call_exitprocs+0x3c>
    23d8:	eaffffe8 	b	2380 <__call_exitprocs+0x10c>
    23dc:	e1a0b006 	mov	r11, r6
    23e0:	e1a06003 	mov	r6, r3
    23e4:	eafffff9 	b	23d0 <__call_exitprocs+0x15c>
    23e8:	000025c8 	.word	0x000025c8
    23ec:	00000000 	.word	0x00000000

000023f0 <register_fini>:
    23f0:	e92d4008 	push	{r3, lr}
    23f4:	e59f3010 	ldr	r3, [pc, #16]	; 240c <register_fini+0x1c>
    23f8:	e3530000 	cmp	r3, #0
    23fc:	159f000c 	ldrne	r0, [pc, #12]	; 2410 <register_fini+0x20>
    2400:	1bffff49 	blne	212c <atexit>
    2404:	e8bd4008 	pop	{r3, lr}
    2408:	e12fff1e 	bx	lr
    240c:	000025f0 	.word	0x000025f0
    2410:	00002414 	.word	0x00002414

00002414 <__libc_fini_array>:
    2414:	e92d4038 	push	{r3, r4, r5, lr}
    2418:	e59f5030 	ldr	r5, [pc, #48]	; 2450 <__libc_fini_array+0x3c>
    241c:	e59f4030 	ldr	r4, [pc, #48]	; 2454 <__libc_fini_array+0x40>
    2420:	e0654004 	rsb	r4, r5, r4
    2424:	e1b04144 	asrs	r4, r4, #2
    2428:	10855104 	addne	r5, r5, r4, lsl #2
    242c:	0a000004 	beq	2444 <__libc_fini_array+0x30>
    2430:	e5353004 	ldr	r3, [r5, #-4]!
    2434:	e1a0e00f 	mov	lr, pc
    2438:	e12fff13 	bx	r3
    243c:	e2544001 	subs	r4, r4, #1
    2440:	1afffffa 	bne	2430 <__libc_fini_array+0x1c>
    2444:	eb000069 	bl	25f0 <__libc_fini>
    2448:	e8bd4038 	pop	{r3, r4, r5, lr}
    244c:	e12fff1e 	bx	lr
    2450:	00002608 	.word	0x00002608
    2454:	0000260c 	.word	0x0000260c

00002458 <__cs3_premain>:
    2458:	e92d4008 	push	{r3, lr}
    245c:	eb000017 	bl	24c0 <__libc_init_array>
    2460:	e59f3030 	ldr	r3, [pc, #48]	; 2498 <__cs3_premain+0x40>
    2464:	e3530000 	cmp	r3, #0
    2468:	15930000 	ldrne	r0, [r3]
    246c:	01a00003 	moveq	r0, r3
    2470:	e59f3024 	ldr	r3, [pc, #36]	; 249c <__cs3_premain+0x44>
    2474:	e3530000 	cmp	r3, #0
    2478:	15931000 	ldrne	r1, [r3]
    247c:	01a01003 	moveq	r1, r3
    2480:	e3a02000 	mov	r2, #0
    2484:	ebfff7de 	bl	404 <main>
    2488:	e59f3010 	ldr	r3, [pc, #16]	; 24a0 <__cs3_premain+0x48>
    248c:	e3530000 	cmp	r3, #0
    2490:	1bffff2d 	blne	214c <exit>
    2494:	eafffffe 	b	2494 <__cs3_premain+0x3c>
	...
    24a0:	0000214c 	.word	0x0000214c

000024a4 <_exit>:
    24a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    24a8:	e3a00018 	mov	r0, #24
    24ac:	e59f1004 	ldr	r1, [pc, #4]	; 24b8 <_exit+0x14>
    24b0:	ef123456 	svc	0x00123456
    24b4:	eafffffe 	b	24b4 <_exit+0x10>
    24b8:	00020026 	.word	0x00020026

000024bc <__cs3_isr_interrupt>:
    24bc:	eafffffe 	b	24bc <__cs3_isr_interrupt>

000024c0 <__libc_init_array>:
    24c0:	e92d4070 	push	{r4, r5, r6, lr}
    24c4:	e59f506c 	ldr	r5, [pc, #108]	; 2538 <__libc_init_array+0x78>
    24c8:	e59f606c 	ldr	r6, [pc, #108]	; 253c <__libc_init_array+0x7c>
    24cc:	e0656006 	rsb	r6, r5, r6
    24d0:	e1b06146 	asrs	r6, r6, #2
    24d4:	12455004 	subne	r5, r5, #4
    24d8:	13a04000 	movne	r4, #0
    24dc:	0a000005 	beq	24f8 <__libc_init_array+0x38>
    24e0:	e5b53004 	ldr	r3, [r5, #4]!
    24e4:	e2844001 	add	r4, r4, #1
    24e8:	e1a0e00f 	mov	lr, pc
    24ec:	e12fff13 	bx	r3
    24f0:	e1560004 	cmp	r6, r4
    24f4:	1afffff9 	bne	24e0 <__libc_init_array+0x20>
    24f8:	e59f5040 	ldr	r5, [pc, #64]	; 2540 <__libc_init_array+0x80>
    24fc:	e59f6040 	ldr	r6, [pc, #64]	; 2544 <__libc_init_array+0x84>
    2500:	e0656006 	rsb	r6, r5, r6
    2504:	eb000031 	bl	25d0 <_init>
    2508:	e1b06146 	asrs	r6, r6, #2
    250c:	12455004 	subne	r5, r5, #4
    2510:	13a04000 	movne	r4, #0
    2514:	0a000005 	beq	2530 <__libc_init_array+0x70>
    2518:	e5b53004 	ldr	r3, [r5, #4]!
    251c:	e2844001 	add	r4, r4, #1
    2520:	e1a0e00f 	mov	lr, pc
    2524:	e12fff13 	bx	r3
    2528:	e1560004 	cmp	r6, r4
    252c:	1afffff9 	bne	2518 <__libc_init_array+0x58>
    2530:	e8bd4070 	pop	{r4, r5, r6, lr}
    2534:	e12fff1e 	bx	lr
    2538:	000025e8 	.word	0x000025e8
    253c:	000025e8 	.word	0x000025e8
    2540:	000025e8 	.word	0x000025e8
    2544:	000025f0 	.word	0x000025f0

Disassembly of section .rodata:

0000254c <byteCodes>:
    254c:	241b1d1c 342c2b23 3b3c3335 00000042     ...$#+,453<;B...

0000255c <baseFrequencies>:
    255c:	4302d021 430a978d 4312d53f 431b9062     !..C...C?..Cb..C
    256c:	4324d062 432e9d2f 4338ff7d 4343ff7d     b.$C/..C}.8C}.CC
    257c:	434fa72b 435c0000 436914fe 4376f127     +.OC..\C..iC'.vC
    258c:	4382d021                                !..C

00002590 <numFrequencies>:
    2590:	0000000d                                ....

00002594 <maxOctave>:
    2594:	00000005                                ....

00002598 <minOctave>:
    2598:	00000001                                ....

0000259c <baseOctave>:
    259c:	00000003                                ....

000025a0 <octaveCodes>:
    25a0:	0000554e                                NU..

000025a4 <maxTableAmplitude>:
    25a4:	00800000                                ....

000025a8 <maxAmplitude>:
    25a8:	00ffffff                                ....

000025ac <maxVolume>:
    25ac:	00000032                                2...

000025b0 <volumeCodes>:
    25b0:	00000901                                ....

000025b4 <llBound>:
    25b4:	00000000 0000000a                       ........

000025bc <urBound>:
    25bc:	0000013f 000000e6                       ?.......

000025c4 <displayScaler>:
    25c4:	40960000                                ...@

000025c8 <_global_impure_ptr>:
    25c8:	00031430 00000043                       0...C...

000025d0 <_init>:
    25d0:	e1a0c00d 	mov	r12, sp
    25d4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    25d8:	e24cb004 	sub	r11, r12, #4
    25dc:	e24bd028 	sub	sp, r11, #40	; 0x28
    25e0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    25e4:	e12fff1e 	bx	lr

000025e8 <__init_array_start>:
    25e8:	000023f0 	.word	0x000023f0

000025ec <__frame_dummy_init_array_entry>:
    25ec:	00000208                                ....

000025f0 <__libc_fini>:
    25f0:	e1a0c00d 	mov	r12, sp
    25f4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    25f8:	e24cb004 	sub	r11, r12, #4
    25fc:	e24bd028 	sub	sp, r11, #40	; 0x28
    2600:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2604:	e12fff1e 	bx	lr

00002608 <__fini_array_start>:
    2608:	000001c4 	.word	0x000001c4

0000260c <__cs3_regions>:
    260c:	00000000 	.word	0x00000000
    2610:	00000040 	.word	0x00000040
    2614:	00000040 	.word	0x00000040
    2618:	00031820 	.word	0x00031820
    261c:	00000020 	.word	0x00000020
